import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import MainLayout from "../../layouts/MainLayout";
import "./ShareSurveyPage.css";
import { QRCodeCanvas } from "qrcode.react";
import { surveyService } from "../../services/surveyService";
import { questionService } from "../../services/questionSurvey";

const ShareSurveyPage = () => {
    const location = useLocation();
    const navigate = useNavigate();

    const passedSurvey = location.state?.survey;
    const passedSurveyId = location.state?.surveyId || passedSurvey?.id;

    const [survey, setSurvey] = useState({
        id: passedSurveyId || passedSurvey?.id || null,
        title: passedSurvey?.title || "",
        description: passedSurvey?.description || "",
        startDate: passedSurvey?.createdAt
            ? new Date(passedSurvey.createdAt).toLocaleDateString("vi-VN")
            : "",
        startTime: passedSurvey?.createdAt
            ? new Date(passedSurvey.createdAt).toLocaleTimeString("vi-VN", {
                hour: "2-digit",
                minute: "2-digit",
            })
            : "",
        totalQuestions: Array.isArray(passedSurvey?.questions)
            ? passedSurvey.questions.length
            : 0,
        status: passedSurvey?.status || "",
        link: passedSurvey?.shareLink || "",
    });

    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const load = async () => {
            const id = passedSurveyId;
            if (!id) {
                // Kh√¥ng c√≥ id -> quay l·∫°i dashboard
                navigate("/dashboard");
                return;
            }
            try {
                setLoading(true);
                // L·∫•y chi ti·∫øt kh·∫£o s√°t
                const detail = await surveyService.getSurveyById(id);

                const createdAt = new Date(
                    detail.createdAt || detail.created_at || Date.now()
                );
                const startDate = createdAt.toLocaleDateString("vi-VN");
                const startTime = createdAt.toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                });

                // L·∫•y s·ªë c√¢u h·ªèi
                let totalQuestions = survey.totalQuestions;
                try {
                    const questions = await questionService.getQuestionsBySurvey(id);
                    totalQuestions = Array.isArray(questions) ? questions.length : (questions?.length ?? 0);
                } catch (_) {
                    // fallback gi·ªØ nguy√™n n·∫øu API l·ªói
                }

                const shareLink =
                    detail.shareLink ||
                    survey.link ||
                    `${window.location.origin}/response/${id}`;

                setSurvey({
                    id,
                    title: detail.title || "",
                    description: detail.description || "",
                    startDate,
                    startTime,
                    totalQuestions,
                    status: detail.status || "",
                    link: shareLink,
                });
            } catch (err) {
                console.error("ShareSurveyPage: load error", err);
                alert("Kh√¥ng t·∫£i ƒë∆∞·ª£c th√¥ng tin kh·∫£o s√°t.");
                navigate("/dashboard");
            } finally {
                setLoading(false);
            }
        };
        load();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const handleCopy = () => {
        navigator.clipboard.writeText(survey.link);
        alert("ƒê√£ sao ch√©p li√™n k·∫øt kh·∫£o s√°t!");
    };

    return (
        <MainLayout>
            <div className="share-survey-container">
                <div className="share-survey-header">
                    <div className="share-survey-information">
                        <div className="share-survey-title-row">
                            <h1>{survey.title || (loading ? "ƒêang t·∫£i..." : "")}</h1>
                            <div className="share-survey-status">
                                <span className="share-status-dot"></span>
                                <span>{survey.status}</span>
                            </div>
                        </div>
                        <p>{survey.description}</p>
                        <div className="share-survey-info">
                            <p>
                                <b>T·∫°o ng√†y:</b> {survey.startDate} &nbsp; | &nbsp;
                                <b>K√≠ch ho·∫°t:</b> {survey.startDate} l√∫c {survey.startTime} &nbsp; | &nbsp;
                                <b>{survey.totalQuestions}</b> c√¢u h·ªèi
                            </p>
                        </div>
                    </div>

                    <div className="share-survey-actions">
                        <button className="btn-outline">‚öô C√†i ƒë·∫∑t</button>
                        <button
                            className="btn-outline"
                            onClick={() =>
                                navigate('/create-survey', {
                                    state: {
                                        editSurvey: {
                                            id: survey.id,
                                            title: survey.title,
                                            description: survey.description,
                                            status: survey.status
                                        }
                                    }
                                })
                            }
                        >
                            ‚úè Ch·ªânh s·ª≠a
                        </button>
                    </div>
                </div>

                <div className="share-section">
                    <h2>üîó Chia s·∫ª kh·∫£o s√°t c·ªßa b·∫°n</h2>
                    <p>Sao ch√©p li√™n k·∫øt ho·∫∑c qu√©t m√£ QR ƒë·ªÉ b·∫Øt ƒë·∫ßu thu th·∫≠p ph·∫£n h·ªìi</p>

                    <div className="share-content">
                        <div className="share-left">
                            <label>Li√™n k·∫øt kh·∫£o s√°t</label>
                            <div className="link-box">
                                <input
                                    type="text"
                                    value={survey.link}
                                    readOnly
                                    className="survey-link"
                                />
                                <button className="btn-copy" onClick={handleCopy}>
                                    üìã
                                </button>
                            </div>

                            <p>Chia s·∫ª nhanh</p>
                            <div className="share-buttons">
                                <button className="btn-email">üìß Email</button>
                                <button className="btn-social">üåê M·∫°ng x√£ h·ªôi</button>
                                <button className="btn-embed">üíª Nh√∫ng</button>
                            </div>
                        </div>

                        {/* T·∫°m th·ªùi ·∫©n QR code ƒë·ªÉ tr√°nh ph·ª• thu·ªôc th∆∞ vi·ªán */}
                        <div className="share-right">
                            <label>M√£ QR</label>
                            <div className="qr-box">
                                <QRCodeCanvas value={survey.link} size={120} />
                                <p>Qu√©t ƒë·ªÉ m·ªü kh·∫£o s√°t tr√™n ƒëi·ªán tho·∫°i</p>
                            </div>
                        </div>
                    </div>

                    <div className="ai-note">
                        <a href="#">üîç S·∫µn s√†ng thu th·∫≠p d·ªØ li·ªáu ‚ûú</a>
                    </div>
                </div>
            </div>
        </MainLayout>
    );
};

export default ShareSurveyPage;
