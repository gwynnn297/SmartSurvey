import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import HeaderComponent from "../../components/HeaderComponent";
import { surveyService } from '../../services/surveyService';
import { aiSurveyApi } from '../../api/aiSurveyApi';
import MainLayout from '../../layouts/MainLayout';
import './CreateAI.css';

export default function CreateAI() {
    const navigate = useNavigate();
    const [form, setForm] = useState({
        title: '',
        category_id: '',
        short_description: '',
        deadline_date: '',
        deadline_time: '',
        ai_context: ''
    });

    const [errors, setErrors] = useState({});
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(false);
    const [categoriesLoading, setCategoriesLoading] = useState(true);
    const [aiResult, setAiResult] = useState(null);

    // AI Processing states
    const [showProcessingModal, setShowProcessingModal] = useState(false);
    const [currentStep, setCurrentStep] = useState(0);
    const [progress, setProgress] = useState(0);

    useEffect(() => {
        (async () => {
            try {
                setCategoriesLoading(true);
                const res = await surveyService.getCategories();

                // Handle different response structures
                let categoriesList = [];
                if (Array.isArray(res)) {
                    categoriesList = res;
                } else if (res?.data && Array.isArray(res.data)) {
                    categoriesList = res.data;
                } else if (res?.result && Array.isArray(res.result)) {
                    categoriesList = res.result;
                } else {
                    categoriesList = [];
                }

                setCategories(categoriesList);
            } catch (e) {
                console.error('Error loading categories:', e);
                // Fallback categories if API fails
                const fallbackCategories = [
                    { id: 1, name: 'Kh√°ch h√†ng' },
                    { id: 2, name: 'Nh√¢n vi√™n' },
                    { id: 3, name: 'S·∫£n ph·∫©m' },
                    { id: 4, name: 'D·ªãch v·ª•' }
                ];
                setCategories(fallbackCategories);
            } finally {
                setCategoriesLoading(false);
            }
        })();
    }, []);


    const steps = useMemo(() => ([
        { key: 1, label: 'Nh·∫≠p ng·ªØ c·∫£nh' },
        { key: 2, label: 'AI t·∫°o c√¢u h·ªèi' },
        { key: 3, label: 'Ch·ªânh s·ª≠a kh·∫£o s√°t' }
    ]), []);

    // AI Processing steps
    const aiSteps = useMemo(() => ([
        { key: 1, label: 'Ph√¢n t√≠ch ng·ªØ c·∫£nh v√† m·ª•c ti√™u kh·∫£o s√°t', completed: false },
        { key: 2, label: 'T·∫°o b·ªô c√¢u h·ªèi ph√π h·ª£p', completed: false },
        { key: 3, label: 'T·ªëi ∆∞u h√≥a th·ª© t·ª± v√† logic c√¢u h·ªèi', completed: false },
        { key: 4, label: 'Ho√†n thi·ªán v√† chu·∫©n b·ªã giao di·ªán ch·ªânh s·ª≠a', completed: false }
    ]), []);

    const handleChange = (field, value) => {
        setForm(prev => ({ ...prev, [field]: value }));
        setErrors(prev => ({ ...prev, [field]: '' }));
    };

    const validate = () => {
        const newErrors = {};
        if (!form.title.trim()) newErrors.title = 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ';
        if (!form.category_id) newErrors.category_id = 'Vui l√≤ng ch·ªçn ch·ªß ƒë·ªÅ';
        if (!form.ai_context.trim()) newErrors.ai_context = 'Vui l√≤ng nh·∫≠p ng·ªØ c·∫£nh chi ti·∫øt';
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    // Simulate AI processing with animated steps
    const simulateAIProcessing = async () => {
        setCurrentStep(0);
        setProgress(0);

        for (let i = 0; i < aiSteps.length; i++) {
            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second per step
            setCurrentStep(i + 1);
            setProgress(((i + 1) / aiSteps.length) * 100);
        }
    };

    const onSubmit = async () => {
        if (!validate()) return;

        // Show processing modal
        setShowProcessingModal(true);
        setLoading(true);

        try {
            // Start AI processing simulation
            await simulateAIProcessing();

            // Send data to backend
            const payload = {
                title: form.title,
                description: form.short_description,
                category: form.category_id,
                ai_prompt: form.ai_context
            };

            console.log('üöÄ Sending AI survey data to backend:', payload);
            const result = await aiSurveyApi.generateSurvey(payload);
            setAiResult(result);

            // Navigate to survey editor after completion
            setTimeout(() => {
                navigate('/create-survey', {
                    state: {
                        aiGeneratedData: result,
                        surveyInfo: {
                            title: form.title,
                            description: form.short_description,
                            category: form.category_id
                        }
                    }
                });
            }, 2000);

        } catch (e) {
            console.error('‚ùå AI generation error:', e);
            alert('Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω. Vui l√≤ng th·ª≠ l·∫°i.');
            setShowProcessingModal(false);
        } finally {
            setLoading(false);
        }
    };

    const handleCancelProcessing = () => {
        setShowProcessingModal(false);
        setCurrentStep(0);
        setProgress(0);
    };

    return (
        <>
            <MainLayout>


                <div className="ai-container">
                    <div className="ai-steps">
                        {steps.map((s, idx) => (
                            <div key={s.key} className={`ai-step ${idx === 0 ? 'active' : ''}`}>
                                <span className="ai-step-index">{idx + 1}</span>
                                <span className="ai-step-label">{s.label}</span>
                            </div>
                        ))}
                    </div>

                    <h2 className="ai-title">T·∫°o kh·∫£o s√°t th√¥ng minh v·ªõi AI</h2>
                    <p className="ai-subtitle">Cung c·∫•p th√¥ng tin ƒë·ªÉ AI t·∫°o b·ªô c√¢u h·ªèi ph√π h·ª£p.</p>

                    <div className="ai-form-card">
                        <div className="ai-form-row">
                            <label>Ti√™u ƒë·ªÅ kh·∫£o s√°t <span className="req">*</span></label>
                            <input
                                value={form.title}
                                onChange={(e) => handleChange('title', e.target.value)}
                                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ kh·∫£o s√°t"
                            />
                            {errors.title && <div className="ai-error">{errors.title}</div>}
                        </div>
                        <div className="ai-form-row">
                            <label>M√¥ t·∫£ ng·∫Øn</label>
                            <input
                                value={form.short_description}
                                onChange={(e) => handleChange('short_description', e.target.value)}
                                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m·ª•c ƒë√≠ch kh·∫£o s√°t"
                            />
                        </div>
                        <div className="ai-form-row">
                            <label>Ch·ªß ƒë·ªÅ kh·∫£o s√°t <span className="req">*</span></label>
                            <select
                                value={form.category_id}
                                onChange={(e) => handleChange('category_id', e.target.value)}
                                className={errors.category_id ? 'error' : ''}
                                disabled={categoriesLoading}
                            >
                                <option value="">
                                    {categoriesLoading ? 'ƒêang t·∫£i ch·ªß ƒë·ªÅ...' : 'Ch·ªçn ch·ªß ƒë·ªÅ‚Ä¶'}
                                </option>
                                {categories.map(c => (
                                    <option key={c.id} value={c.id}>{c.name}</option>
                                ))}
                            </select>
                            {errors.category_id && <div className="ai-error">{errors.category_id}</div>}
                        </div>



                        {/* <div className="ai-form-grid">
                        <div className="ai-form-row">
                            <label>H·∫øt h·∫°n</label>
                            <input type="date" value={form.deadline_date} onChange={(e) => handleChange('deadline_date', e.target.value)} />
                        </div>
                        <div className="ai-form-row">
                            <label>&nbsp;</label>
                            <input type="time" value={form.deadline_time} onChange={(e) => handleChange('deadline_time', e.target.value)} />
                        </div>
                    </div> */}

                        <div className="ai-form-row">
                            <label>Ng·ªØ c·∫£nh chi ti·∫øt cho AI <span className="req">*</span></label>
                            <textarea
                                rows={8}
                                value={form.ai_context}
                                onChange={(e) => handleChange('ai_context', e.target.value)}
                                placeholder={`H√£y m√¥ t·∫£ chi ti·∫øt:\n- M·ª•c ti√™u kh·∫£o s√°t\n- ƒê·ªëi t∆∞·ª£ng tham gia\n- Th√¥ng tin c·∫ßn thu th·∫≠p\n- B·ªëi c·∫£nh c·ª• th·ªÉ`}
                            />
                            {errors.ai_context && <div className="ai-error">{errors.ai_context}</div>}
                        </div>

                        <div className="ai-actions">
                            <button className="btn-primary" onClick={onSubmit} disabled={loading}>
                                {loading ? 'ƒêang t·∫°o g·ª£i √Ω‚Ä¶' : 'T·∫°o g·ª£i √Ω b·∫±ng AI'}
                            </button>
                        </div>
                    </div>

                    {aiResult && (
                        <div className="ai-result-card">
                            <h3>K·∫øt qu·∫£ g·ª£i √Ω</h3>
                            <pre className="ai-result-pre">{JSON.stringify(aiResult, null, 2)}</pre>
                        </div>
                    )}
                </div>

                {/* AI Processing Modal */}
                {showProcessingModal && (
                    <div className="ai-processing-modal">
                        <div className="ai-processing-content">
                            {/* Header with AI icon and title */}
                            <div className="ai-processing-header">
                                <div className="ai-icon">üí°</div>
                                <h2>AI ƒëang ph√¢n t√≠ch v√† t·∫°o c√¢u h·ªèi</h2>
                                <p>ƒêang t·∫°o c√¢u h·ªèi ph√π h·ª£p</p>
                            </div>

                            {/* Progress bar */}
                            <div className="ai-progress-container">
                                <div className="ai-progress-bar">
                                    <div
                                        className="ai-progress-fill"
                                        style={{ width: `${progress}%` }}
                                    ></div>
                                </div>
                                <span className="ai-progress-text">{Math.round(progress)}% ho√†n th√†nh</span>
                            </div>

                            {/* Survey Information */}
                            <div className="ai-survey-info">
                                <h3>Th√¥ng tin kh·∫£o s√°t c·ªßa b·∫°n:</h3>
                                <div className="ai-survey-details">
                                    <div className="ai-survey-item">
                                        <strong>Ti√™u ƒë·ªÅ:</strong> {form.title}
                                    </div>
                                    <div className="ai-survey-item">
                                        <strong>Ch·ªß ƒë·ªÅ:</strong> {categories.find(c => c.id == form.category_id)?.name || 'Kh√¥ng x√°c ƒë·ªãnh'}
                                    </div>
                                    <div className="ai-survey-item">
                                        <strong>M√¥ t·∫£:</strong> {form.short_description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                                    </div>
                                </div>
                            </div>

                            {/* AI Processing Steps */}
                            <div className="ai-processing-steps">
                                <h3>AI ƒëang th·ª±c hi·ªán:</h3>
                                <div className="ai-steps-list">
                                    {aiSteps.map((step, index) => (
                                        <div
                                            key={step.key}
                                            className={`ai-step-item ${currentStep > index ? 'completed' : currentStep === index + 1 ? 'active' : ''}`}
                                        >
                                            <div className="ai-step-icon">
                                                {currentStep > index ? '‚úÖ' : currentStep === index + 1 ? 'üîÑ' : (index + 1)}
                                            </div>
                                            <span className="ai-step-label">{step.label}</span>
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {/* Cancel button */}
                            <div className="ai-processing-actions">
                                <button
                                    className="ai-cancel-btn"
                                    onClick={handleCancelProcessing}
                                >
                                    H·ªßy b·ªè v√† quay l·∫°i
                                </button>
                            </div>

                            {/* Helpful tips */}
                            <div className="ai-tips">
                                <div className="ai-tips-header">
                                    <span className="ai-tips-icon">üí°</span>
                                    <strong>M·∫πo h·ªØu √≠ch</strong>
                                </div>
                                <p>Sau khi AI ho√†n th√†nh, b·∫°n s·∫Ω c√≥ th·ªÉ:</p>
                                <ul className="ai-tips-list">
                                    <li>Ch·ªânh s·ª≠a n·ªôi dung t·ª´ng c√¢u h·ªèi</li>
                                    <li>Thay ƒë·ªïi lo·∫°i c√¢u h·ªèi (tr·∫Øc nghi·ªám, t·ª± lu·∫≠n, v.v.)</li>
                                    <li>Th√™m, x√≥a ho·∫∑c s·∫Øp x·∫øp l·∫°i c√¢u h·ªèi</li>
                                    <li>T√πy ch·ªânh c√°c l·ª±a ch·ªçn tr·∫£ l·ªùi</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                )}
            </MainLayout>
        </>
    );
}