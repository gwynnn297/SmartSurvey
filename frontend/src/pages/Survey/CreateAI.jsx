import React, { useEffect, useMemo, useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import MainLayout from '../../layouts/MainLayout';
import { surveyService } from '../../services/surveyService';
import { questionService, optionService } from '../../services/questionSurvey';
import { aiSurveyService } from '../../services/aiSurveyService';
import { categoryService } from '../../services/categoryService';
import './CreateAI.css';
import '../Survey/CreateSurvey.css';

// üß© DND Kit
import {
    DndContext,
    closestCenter,
    PointerSensor,
    useSensor,
    useSensors
} from '@dnd-kit/core';
import {
    SortableContext,
    useSortable,
    verticalListSortingStrategy,
    arrayMove
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

// ‚úÖ 8 lo·∫°i c√¢u h·ªèi ch√≠nh th·ª©c theo backend - ƒë·ªìng b·ªô v·ªõi CreateSurvey
const QUESTION_TYPE_OPTIONS = [
    { value: 'open_ended', label: 'C√¢u h·ªèi m·ªü' },
    { value: 'multiple_choice', label: 'Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn' },
    { value: 'single_choice', label: 'Tr·∫Øc nghi·ªám m·ªôt l·ª±a ch·ªçn' },
    { value: 'boolean_', label: 'ƒê√∫ng / Sai' },
    { value: 'ranking', label: 'X·∫øp h·∫°ng' },
    { value: 'date_time', label: 'Ng√†y / Gi·ªù' },
    { value: 'rating', label: 'ƒê√°nh gi√°' },
    { value: 'file_upload', label: 'T·∫£i file l√™n' }
];

const mapTypeFromBackend = (type) => {
    switch (type) {
        case 'open_ended':
            return 'open_ended';
        case 'boolean':
        case 'boolean_':
            return 'boolean_';
        default:
            return type || 'open_ended';
    }
};

const mapTypeToBackend = (type) => {
    switch (type) {
        case 'short_text':
        case 'open_ended':
            return 'open_ended';
        case 'yes_no':
        case 'boolean_':
            return 'boolean_';
        default:
            return type;
    }
};

const createEmptyOption = (text = '') => ({
    id: `temp_option_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
    option_text: text
});

const createDefaultOptions = () => [
    createEmptyOption('L·ª±a ch·ªçn 1'),
    createEmptyOption('L·ª±a ch·ªçn 2')
];

const createYesNoOptions = () => [
    createEmptyOption('C√≥'),
    createEmptyOption('Kh√¥ng')
];

const createEmptyQuestion = (type = 'open_ended') => {
    const base = {
        id: `temp_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
        question_text: '',
        question_type: type,
        options: [],
        is_required: false
    };

    if (type === 'multiple_choice' || type === 'single_choice') {
        return {
            ...base,
            options: createDefaultOptions(),
            choice_type: type === 'multiple_choice' ? 'multiple' : 'single'
        };
    }

    if (type === 'boolean_' || type === 'yes_no') {
        return {
            ...base,
            options: createYesNoOptions()
        };
    }

    if (type === 'ranking') {
        return {
            ...base,
            options: createDefaultOptions()
        };
    }

    if (type === 'rating') {
        return {
            ...base,
            rating_scale: 5
        };
    }

    if (type === 'date_time') {
        return {
            ...base,
            // No special config needed
        };
    }

    if (type === 'file_upload') {
        return {
            ...base,
            // No special config needed
        };
    }

    return base;
};

const normalizeQuestionData = (rawQuestion) => {
    if (!rawQuestion) {
        return createEmptyQuestion();
    }

    const questionId = rawQuestion.id || `temp_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;
    const backendType = rawQuestion.question_type || rawQuestion.questionType || 'open_ended';
    const normalizedType = mapTypeFromBackend(backendType);

    const base = {
        id: questionId,
        question_text: rawQuestion.question_text || rawQuestion.questionText || '',
        question_type: normalizedType,
        is_required: rawQuestion.is_required ?? rawQuestion.isRequired ?? false,
        options: []
    };

    if (normalizedType === 'multiple_choice' || normalizedType === 'single_choice') {
        const rawOptions = rawQuestion.options || rawQuestion.optionsList || [];
        const mappedOptions = rawOptions.length > 0
            ? rawOptions.map(opt => ({
                id: opt?.id || `temp_option_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
                option_text: opt?.option_text ?? opt?.optionText ?? ''
            }))
            : createDefaultOptions();
        return {
            ...base,
            options: mappedOptions,
            choice_type: rawQuestion.choice_type || rawQuestion.choiceType || (normalizedType === 'multiple_choice' ? 'multiple' : 'single')
        };
    }

    if (normalizedType === 'boolean_' || normalizedType === 'yes_no') {
        const rawOptions = rawQuestion.options || [];
        const mappedOptions = rawOptions.length >= 2
            ? rawOptions.map(opt => ({
                id: opt?.id || `temp_option_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
                option_text: opt?.option_text ?? opt?.optionText ?? ''
            }))
            : createYesNoOptions();
        return {
            ...base,
            options: mappedOptions
        };
    }

    if (normalizedType === 'ranking') {
        const rawOptions = rawQuestion.options || rawQuestion.optionsList || [];
        const mappedOptions = rawOptions.length > 0
            ? rawOptions.map(opt => ({
                id: opt?.id || `temp_option_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
                option_text: opt?.option_text ?? opt?.optionText ?? ''
            }))
            : createDefaultOptions();
        return {
            ...base,
            options: mappedOptions
        };
    }

    if (normalizedType === 'rating') {
        return {
            ...base,
            rating_scale: rawQuestion.rating_scale || rawQuestion.ratingScale || 5
        };
    }

    if (normalizedType === 'date_time' || normalizedType === 'file_upload') {
        return base;
    }

    return base;
};

// üéØ Sortable Ranking Option Component
function SortableRankingOption({ id, index, option, error, onTextChange, onDelete, disabled, onMoveUp, onMoveDown, totalCount }) {
    const {
        attributes,
        listeners,
        setNodeRef,
        transform,
        transition,
        isDragging
    } = useSortable({ id });

    const style = {
        transform: CSS.Transform.toString(transform),
        transition,
        opacity: isDragging ? 0.5 : 1
    };

    return (
        <div
            ref={setNodeRef}
            style={style}
            className={`ranking-option-item ${isDragging ? 'is-dragging' : ''}`}
        >
            <div className="ranking-handle" {...attributes} {...listeners}>
                <i className="fa-solid fa-grip-vertical" aria-hidden="true"></i>
            </div>
            <span className="ranking-number">{index + 1}</span>
            <input
                className={`option-input ranking-input ${error ? 'error' : ''}`}
                value={option.option_text}
                onChange={(e) => onTextChange(e.target.value)}
                placeholder={`L·ª±a ch·ªçn ${index + 1}`}
            />
            <div className="ranking-actions">
                <button
                    type="button"
                    className="ranking-move-btn"
                    onClick={(e) => {
                        e.stopPropagation();
                        onMoveUp?.();
                    }}
                    disabled={index === 0}
                    aria-label="Di chuy·ªÉn l√™n"
                    title="Di chuy·ªÉn l√™n"
                >
                    <i className="fa-solid fa-chevron-up" aria-hidden="true"></i>
                </button>
                <button
                    type="button"
                    className="ranking-move-btn"
                    onClick={(e) => {
                        e.stopPropagation();
                        onMoveDown?.();
                    }}
                    disabled={index === totalCount - 1}
                    aria-label="Di chuy·ªÉn xu·ªëng"
                    title="Di chuy·ªÉn xu·ªëng"
                >
                    <i className="fa-solid fa-chevron-down" aria-hidden="true"></i>
                </button>
            </div>
            <button
                type="button"
                className="remove-option"
                onClick={() => {
                    if (totalCount <= 2) return;
                    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ª±a ch·ªçn n√†y kh√¥ng?')) {
                        onDelete?.();
                    }
                }}
                disabled={totalCount <= 2 || disabled}
                aria-label="X√≥a l·ª±a ch·ªçn"
            >
                <i className="fa-solid fa-delete-left" aria-hidden="true"></i>
            </button>
        </div>
    );
}

export default function CreateAI() {
    const navigate = useNavigate();
    const [form, setForm] = useState({
        title: '',
        category_name: '', // ƒê·ªïi t·ª´ category_id th√†nh category_name ƒë·ªÉ c√≥ th·ªÉ nh·∫≠p t·ª± do
        description: '',
        ai_context: '',
        target_audience: '',
        question_count: 5
    });

    const [errors, setErrors] = useState({});
    const [categories, setCategories] = useState([]);
    const [filteredCategories, setFilteredCategories] = useState([]);
    const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
    const [loading, setLoading] = useState(false);
    const [categoriesLoading, setCategoriesLoading] = useState(true);
    const [questions, setQuestions] = useState([]);
    const [activeQuestionIndex, setActiveQuestionIndex] = useState(null);
    const [refreshingQuestions, setRefreshingQuestions] = useState(new Set());
    const [showProcessingModal, setShowProcessingModal] = useState(false);
    const [currentStep, setCurrentStep] = useState(0);
    const [progress, setProgress] = useState(0);
    const [showForm, setShowForm] = useState(true);
    const [showMobileView, setShowMobileView] = useState(false);
    
    // Ref ƒë·ªÉ ngƒÉn vi·ªác l∆∞u nhi·ªÅu l·∫ßn
    const isSavingRef = useRef(false);

    // DND Kit sensors
    const sensors = useSensors(
        useSensor(PointerSensor, {
            activationConstraint: { distance: 8 }
        })
    );

    useEffect(() => {
        loadCategories();

        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu t·∫°m th·ªùi t·ª´ preview kh√¥ng
        const tempData = localStorage.getItem('aiSurveyTempData');
        if (tempData) {
            try {
                const parsed = JSON.parse(tempData);
                // Ki·ªÉm tra d·ªØ li·ªáu kh√¥ng qu√° c≈© (d∆∞·ªõi 1 gi·ªù)
                if (Date.now() - parsed.timestamp < 3600000) {
                    setForm(parsed.form);
                    setQuestions(parsed.questions);
                    setActiveQuestionIndex(parsed.activeQuestionIndex);
                    setShowForm(false);
                    // X√≥a d·ªØ li·ªáu t·∫°m th·ªùi sau khi s·ª≠ d·ª•ng
                    localStorage.removeItem('aiSurveyTempData');
                }
            } catch (error) {
                console.error('Error parsing temp data:', error);
                localStorage.removeItem('aiSurveyTempData');
            }
        }
    }, []);

    useEffect(() => {
        if (questions.length === 0) {
            setActiveQuestionIndex(null);
            return;
        }

        if (activeQuestionIndex === null || activeQuestionIndex >= questions.length) {
            setActiveQuestionIndex(0);
        }
    }, [questions, activeQuestionIndex]);

    const loadCategories = async () => {
        try {
            console.log('üîÑ Loading categories...');
            const categoriesData = await categoryService.getAllCategories();
            console.log('‚úÖ Categories loaded:', categoriesData);
            console.log('üìä Number of categories:', categoriesData?.length); // Debug log
            console.log('üîç Category structure sample:', categoriesData?.[0]); // Debug log

            setCategories(categoriesData);
        } catch (error) {
            console.error('‚ùå Error loading categories:', error);
            // Kh√¥ng c·∫ßn thi·∫øt ph·∫£i c√≥ categories t·ª´ DB v√¨ user c√≥ th·ªÉ nh·∫≠p t·ª± do
            setCategories([]);
        } finally {
            setCategoriesLoading(false);
        }
    };

    // Handle category input change with auto-complete
    const handleCategoryInputChange = async (value) => {
        setForm(prev => ({ ...prev, category_name: value }));
        clearError('category_name');

        if (value.trim().length > 0) {
            try {
                console.log('üîç Searching categories for:', value); // Debug log
                console.log('üìã All categories available:', categories); // Debug log

                // Search trong categories ƒë√£ load - s·ª≠ d·ª•ng ƒë√∫ng field name
                const localFiltered = categories.filter(cat =>
                    (cat.categoryName || cat.name || '').toLowerCase().includes(value.toLowerCase())
                );

                console.log('üéØ Local filtered results:', localFiltered); // Debug log

                // N·∫øu c√≥ √≠t h∆°n 5 k·∫øt qu·∫£ local, search th√™m t·ª´ server
                if (localFiltered.length < 5) {
                    const serverResults = await categoryService.searchCategories(value);

                    // Merge v√† remove duplicates - s·ª≠ d·ª•ng ƒë√∫ng field name
                    const merged = [...localFiltered];
                    serverResults.forEach(serverCat => {
                        const serverId = serverCat.categoryId || serverCat.id;
                        if (!merged.find(localCat => (localCat.categoryId || localCat.id) === serverId)) {
                            merged.push(serverCat);
                        }
                    });

                    setFilteredCategories(merged.slice(0, 10)); // Gi·ªõi h·∫°n 10 k·∫øt qu·∫£
                } else {
                    setFilteredCategories(localFiltered.slice(0, 10));
                }

                setShowCategoryDropdown(true);
            } catch (error) {
                console.error('Error searching categories:', error);
                // Fallback to local search only
                const localFiltered = categories.filter(cat =>
                    (cat.categoryName || cat.name || '').toLowerCase().includes(value.toLowerCase())
                );
                setFilteredCategories(localFiltered.slice(0, 10));
                setShowCategoryDropdown(true);
            }
        } else {
            setFilteredCategories([]);
            setShowCategoryDropdown(false);
        }
    };

    // Handle category selection from dropdown
    const handleCategorySelect = (category) => {
        // S·ª≠ d·ª•ng ƒë√∫ng field name
        const categoryName = category.categoryName || category.name || '';
        setForm(prev => ({ ...prev, category_name: categoryName }));
        setShowCategoryDropdown(false);
        clearError('category_name');
    };

    // Hide dropdown when clicking outside
    const handleCategoryBlur = () => {
        setTimeout(() => setShowCategoryDropdown(false), 200);
    };

    const stats = useMemo(() => {
        const total = questions.length;
        const required = questions.filter(q => q.is_required).length;
        const multipleChoice = questions.filter(q => q.question_type === 'multiple_choice').length;
        const singleChoice = questions.filter(q => q.question_type === 'single_choice').length;
        const booleanQ = questions.filter(q => q.question_type === 'boolean_' || q.question_type === 'yes_no').length;
        const ranking = questions.filter(q => q.question_type === 'ranking').length;
        const rating = questions.filter(q => q.question_type === 'rating').length;
        const dateTime = questions.filter(q => q.question_type === 'date_time').length;
        const fileUpload = questions.filter(q => q.question_type === 'file_upload').length;
        const closed = multipleChoice + singleChoice + booleanQ + ranking + rating;
        return {
            total,
            required,
            multipleChoice,
            singleChoice,
            booleanQ,
            ranking,
            rating,
            dateTime,
            fileUpload,
            open: total - closed
        };
    }, [questions]);

    const hasErrors = useMemo(() => Object.keys(errors).length > 0, [errors]);

    const clearError = (key) => {
        setErrors(prev => {
            if (!prev[key]) return prev;
            const updated = { ...prev };
            delete updated[key];
            return updated;
        });
    };

    const clearQuestionErrors = () => {
        setErrors(prev => {
            const hasQuestionError = Object.keys(prev).some(key => key.startsWith('question_'));
            if (!hasQuestionError) return prev;
            const updated = { ...prev };
            Object.keys(updated).forEach(key => {
                if (key.startsWith('question_')) {
                    delete updated[key];
                }
            });
            return updated;
        });
    };

    const handleFormChange = (field, value) => {
        setForm(prev => ({ ...prev, [field]: value }));
        clearError(field);
    };

    const validateForm = () => {
        const newErrors = {};
        if (!form.title.trim()) {
            newErrors.title = 'Ti√™u ƒë·ªÅ kh·∫£o s√°t l√† b·∫Øt bu·ªôc';
        }
        if (!form.category_name.trim()) {
            newErrors.category_name = 'Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn danh m·ª•c kh·∫£o s√°t';
        }
        if (!form.ai_context.trim()) {
            newErrors.ai_context = 'Vui l√≤ng nh·∫≠p ng·ªØ c·∫£nh chi ti·∫øt';
        } else if (form.ai_context.trim().length < 20) {
            newErrors.ai_context = 'Ng·ªØ c·∫£nh qu√° ng·∫Øn. Vui l√≤ng m√¥ t·∫£ chi ti·∫øt h∆°n (√≠t nh·∫•t 20 k√Ω t·ª±)';
        }
        const questionCount = Number(form.question_count);
        if (!questionCount || questionCount < 3 || questionCount > 20) {
            newErrors.question_count = 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng c√¢u h·ªèi t·ª´ 3 ƒë·∫øn 20';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const validateQuestions = () => {
        const newErrors = {};
        if (questions.length === 0) {
            newErrors.questions = 'Kh·∫£o s√°t ph·∫£i c√≥ √≠t nh·∫•t 1 c√¢u h·ªèi';
        }
        questions.forEach((q, idx) => {
            if (!q.question_text.trim()) {
                newErrors[`question_${idx}`] = 'N·ªôi dung c√¢u h·ªèi l√† b·∫Øt bu·ªôc';
            }
            if (q.question_type === 'multiple_choice' || q.question_type === 'single_choice') {
                const validOpts = q.options?.filter(o => o.option_text.trim());
                if (!validOpts || validOpts.length < 2) {
                    newErrors[`question_${idx}_options`] = 'C√¢u h·ªèi tr·∫Øc nghi·ªám c·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn';
                }
            }
            if (q.question_type === 'boolean_' || q.question_type === 'yes_no') {
                const yesNoOpts = q.options?.filter(o => o.option_text.trim());
                if (!yesNoOpts || yesNoOpts.length < 2) {
                    newErrors[`question_${idx}_options`] = 'C√¢u h·ªèi ƒê√∫ng/Sai c·∫ßn t·ªëi thi·ªÉu 2 l·ª±a ch·ªçn';
                }
            }
            if (q.question_type === 'ranking') {
                const rankingOpts = q.options?.filter(o => o.option_text.trim());
                if (!rankingOpts || rankingOpts.length < 2) {
                    newErrors[`question_${idx}_options`] = 'C√¢u h·ªèi x·∫øp h·∫°ng c·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn';
                }
            }
        });
        setErrors(prev => ({ ...prev, ...newErrors }));
        return Object.keys(newErrors).length === 0;
    };

    const handleGenerateQuestions = async () => {
        if (!validateForm()) return;

        setLoading(true);
        setShowProcessingModal(true);
        setCurrentStep(0);
        setProgress(0);

        try {
            // T·ªëi ∆∞u progress animation - nhanh h∆°n
            const progressInterval = setInterval(() => {
                setProgress(prev => {
                    const newProgress = prev + 15;
                    if (newProgress >= 90) {
                        clearInterval(progressInterval);
                        return 90;
                    }
                    return newProgress;
                });
                setCurrentStep(prev => Math.min(prev + 1, 3));
            }, 300); // Gi·∫£m t·ª´ 500ms xu·ªëng 300ms

            // S·ª≠ d·ª•ng ƒë√∫ng s·ªë l∆∞·ª£ng c√¢u h·ªèi ng∆∞·ªùi d√πng y√™u c·∫ßu
            const requestedQuestions = parseInt(form.question_count);
            
            // G·ªçi API backend th·∫≠t
            const requestData = {
                title: form.title,
                description: form.description,
                categoryId: null, // S·∫Ω ƒë∆∞·ª£c backend x·ª≠ l√Ω
                categoryName: form.category_name,
                aiPrompt: form.ai_context,
                targetAudience: form.target_audience || null,
                numberOfQuestions: requestedQuestions // S·ª≠ d·ª•ng ƒë√∫ng s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng y√™u c·∫ßu
            };

            console.log("üöÄ Calling AI backend with:", requestData);

            const aiResponse = await aiSurveyService.generateSurvey(requestData);

            // Clear progress interval v√† set 100%
            clearInterval(progressInterval);
            setProgress(100);
            setCurrentStep(4);

            if (aiResponse.success && aiResponse.generated_survey) {
                // Map response t·ª´ backend v·ªÅ format frontend
                const mappedQuestions = aiResponse.generated_survey.questions.map((q, index) => ({
                    id: `temp_${Date.now()}_${index}`,
                    question_text: q.question_text || q.questionText,
                    question_type: mapTypeFromBackend(q.question_type || q.questionType),
                    is_required: q.is_required ?? q.isRequired ?? true,
                    options: q.options ? q.options.map((opt, optIndex) => ({
                        id: `temp_option_${Date.now()}_${optIndex}`,
                        option_text: opt.option_text || opt.optionText
                    })) : []
                }));

                setQuestions(mappedQuestions);
                console.log("‚úÖ AI generated questions:", mappedQuestions);

                // Ki·ªÉm tra xem c√≥ c·∫ßn t·∫°o th√™m c√¢u h·ªèi kh√¥ng
                const currentQuestions = mappedQuestions.length;
                const requestedQuestions = parseInt(form.question_count);

                if (requestedQuestions > currentQuestions) {
                    console.log(`üìù Backend ch·ªâ tr·∫£ v·ªÅ ${currentQuestions} c√¢u, y√™u c·∫ßu ${requestedQuestions} c√¢u.`);
                    console.log(`üí° S·∫Ω t·∫°o th√™m ${requestedQuestions - currentQuestions} c√¢u h·ªèi...`);
                    
                    // T·∫°o th√™m c√¢u h·ªèi n·∫øu c√≤n thi·∫øu
                    const remainingQuestions = requestedQuestions - currentQuestions;
                    const additionalRequestData = {
                        title: form.title,
                        description: form.description,
                        categoryName: form.category_name,
                        aiPrompt: form.ai_context + ` (T·∫°o th√™m ${remainingQuestions} c√¢u h·ªèi b·ªï sung cho kh·∫£o s√°t n√†y)`,
                        targetAudience: form.target_audience || null,
                        numberOfQuestions: remainingQuestions
                    };

                    try {
                        const additionalResponse = await aiSurveyService.generateSurvey(additionalRequestData);
                        if (additionalResponse.success && additionalResponse.generated_survey?.questions) {
                            const additionalMappedQuestions = additionalResponse.generated_survey.questions.map((q, index) => ({
                                id: `temp_${Date.now()}_${currentQuestions + index}`,
                                question_text: q.question_text || q.questionText,
                                question_type: mapTypeFromBackend(q.question_type || q.questionType),
                                is_required: q.is_required ?? q.isRequired ?? true,
                                options: q.options ? q.options.map((opt, optIndex) => ({
                                    id: `temp_option_${Date.now()}_${currentQuestions + index}_${optIndex}`,
                                    option_text: opt.option_text || opt.optionText
                                })) : []
                            }));

                            // Th√™m c√°c c√¢u h·ªèi b·ªï sung v√†o danh s√°ch
                            setQuestions(prev => [...prev, ...additionalMappedQuestions]);
                            console.log(`‚úÖ ƒê√£ t·∫°o th√™m ${additionalMappedQuestions.length} c√¢u h·ªèi b·ªï sung`);
                        }
                    } catch (err) {
                        console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th√™m c√¢u h·ªèi b·ªï sung:', err);
                        // V·∫´n hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c th√™m
                        setTimeout(() => {
                            alert(`‚úÖ ƒê√£ t·∫°o ${currentQuestions} c√¢u h·ªèi.\n\nüí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n√∫t "T·∫°o l·∫°i" ƒë·ªÉ t·∫°o th√™m c√¢u h·ªèi ho·∫∑c ch·ªânh s·ª≠a t·ª´ng c√¢u theo √Ω mu·ªën.`);
                        }, 1500);
                    }
                } else {
                    console.log(`‚úÖ ƒê√£ t·∫°o ƒë·ªß ${currentQuestions} c√¢u h·ªèi nh∆∞ y√™u c·∫ßu`);
                }

                // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ user th·∫•y 100% r·ªìi m·ªõi chuy·ªÉn
                setTimeout(() => {
                    setShowProcessingModal(false);
                    setShowForm(false);
                }, 1000);
            } else {
                throw new Error(aiResponse.message || 'Kh√¥ng th·ªÉ t·∫°o kh·∫£o s√°t t·ª´ AI');
            }

        } catch (e) {
            console.error("‚ùå AI generation error:", e);

            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
            let errorMessage = "Kh√¥ng th·ªÉ t·∫°o kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i.";

            if (e.response?.status === 401) {
                errorMessage = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
            } else if (e.response?.status === 500) {
                errorMessage = "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.";
            } else if (e.response?.data?.message) {
                errorMessage = e.response.data.message;
            } else if (e.message) {
                errorMessage = e.message;
            }

            // Hi·ªÉn th·ªã g·ª£i √Ω n·∫øu prompt kh√¥ng r√µ r√†ng
            if (errorMessage.includes('Kh√¥ng th·ªÉ t·∫°o kh·∫£o s√°t') ||
                errorMessage.includes('prompt kh√°c') ||
                errorMessage.includes('Vui l√≤ng th·ª≠ l·∫°i v·ªõi prompt kh√°c')) {
                errorMessage += '\n\nüí° G·ª£i √Ω c·∫£i thi·ªán prompt:\n' +
                    '‚Ä¢ M√¥ t·∫£ r√µ m·ª•c ƒë√≠ch kh·∫£o s√°t\n' +
                    '‚Ä¢ X√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng kh·∫£o s√°t\n' +
                    '‚Ä¢ N√™u chi ti·∫øt n·ªôi dung c·∫ßn kh·∫£o s√°t\n\n' +
                    'üìù V√≠ d·ª• t·ªët: "T·∫°o kh·∫£o s√°t ƒë√°nh gi√° m·ª©c ƒë·ªô h√†i l√≤ng c·ªßa nh√¢n vi√™n IT v·ªÅ m√¥i tr∆∞·ªùng l√†m vi·ªác, bao g·ªìm kh√¥ng gian l√†m vi·ªác, ch√≠nh s√°ch ph√∫c l·ª£i v√† c∆° h·ªôi ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp"';
            }

            alert(errorMessage);
            setShowProcessingModal(false);
        } finally {
            setLoading(false);
        }
    };

    const handleCancelProcessing = () => {
        setShowProcessingModal(false);
        setCurrentStep(0);
        setProgress(0);
    };

    // Question handling functions
    const handleQuestionTextChange = (index, value) => {
        setQuestions(prev => {
            const next = [...prev];
            next[index] = { ...next[index], question_text: value };
            return next;
        });
        clearError(`question_${index}`);
    };

    const handleQuestionTypeChange = (index, type, choiceType) => {
        setQuestions(prev => {
            const next = [...prev];
            const current = { ...next[index], question_type: type };

            if (type === 'multiple_choice' || type === 'single_choice') {
                current.choice_type = choiceType || current.choice_type || (type === 'multiple_choice' ? 'multiple' : 'single');
                current.options = (current.options && current.options.length > 0)
                    ? current.options
                    : createDefaultOptions();
                delete current.rating_scale;
            } else if (type === 'boolean_' || type === 'yes_no') {
                current.options = createYesNoOptions();
                delete current.choice_type;
                delete current.rating_scale;
            } else if (type === 'ranking') {
                current.options = (current.options && current.options.length > 0)
                    ? current.options
                    : createDefaultOptions();
                delete current.choice_type;
                delete current.rating_scale;
            } else if (type === 'rating') {
                delete current.choice_type;
                current.options = [];
                current.rating_scale = current.rating_scale || 5;
            } else if (type === 'date_time' || type === 'file_upload') {
                delete current.choice_type;
                delete current.rating_scale;
                current.options = [];
            } else {
                delete current.choice_type;
                delete current.rating_scale;
                current.options = [];
            }

            next[index] = current;
            return next;
        });

        if (type !== 'multiple_choice' && type !== 'single_choice' && type !== 'ranking' && type !== 'boolean_') {
            clearError(`question_${index}_options`);
        }
    };

    const handleOptionChange = (questionIndex, optionIndex, value) => {
        setQuestions(prev => {
            const next = [...prev];
            const question = { ...next[questionIndex] };
            const options = [...(question.options || [])];
            options[optionIndex] = { ...options[optionIndex], option_text: value };
            question.options = options;
            next[questionIndex] = question;
            return next;
        });
        clearError(`question_${questionIndex}_options`);
    };

    const handleDeleteOption = (questionIndex, optionIndex) => {
        setQuestions(prev => {
            const currentQuestion = prev[questionIndex];
            if (!currentQuestion || (currentQuestion.question_type !== 'multiple_choice' && 
                currentQuestion.question_type !== 'single_choice' && 
                currentQuestion.question_type !== 'ranking')) {
                return prev;
            }
            const next = [...prev];
            const question = { ...next[questionIndex] };
            const currentOptions = [...(question.options || [])];
            
            // Kh√¥ng cho ph√©p x√≥a n·∫øu ch·ªâ c√≤n 2 option
            if (currentOptions.length <= 2) {
                return prev;
            }
            
            const options = currentOptions.filter((_, idx) => idx !== optionIndex);
            question.options = options;
            next[questionIndex] = question;
            return next;
        });
        clearError(`question_${questionIndex}_options`);
    };

    const handleAddOption = (questionIndex) => {
        setQuestions(prev => {
            const currentQuestion = prev[questionIndex];
            if (!currentQuestion || (currentQuestion.question_type !== 'multiple_choice' && 
                currentQuestion.question_type !== 'single_choice' && 
                currentQuestion.question_type !== 'ranking')) {
                return prev;
            }
            const next = [...prev];
            const question = { ...next[questionIndex] };
            const options = [...(question.options || [])];
            options.push(createEmptyOption());
            question.options = options;
            next[questionIndex] = question;
            return next;
        });
    };

    // Move option up/down for ranking
    const handleMoveOptionUp = (questionIndex, optionIndex) => {
        setQuestions(prev => {
            const next = [...prev];
            const question = { ...next[questionIndex] };
            const options = [...(question.options || [])];
            if (optionIndex > 0) {
                [options[optionIndex], options[optionIndex - 1]] = [options[optionIndex - 1], options[optionIndex]];
            }
            question.options = options;
            next[questionIndex] = question;
            return next;
        });
    };

    const handleMoveOptionDown = (questionIndex, optionIndex) => {
        setQuestions(prev => {
            const next = [...prev];
            const question = { ...next[questionIndex] };
            const options = [...(question.options || [])];
            if (optionIndex < options.length - 1) {
                [options[optionIndex], options[optionIndex + 1]] = [options[optionIndex + 1], options[optionIndex]];
            }
            question.options = options;
            next[questionIndex] = question;
            return next;
        });
    };

    const handleChoiceTypeChange = (questionIndex, value) => {
        setQuestions(prev => {
            const next = [...prev];
            const question = { ...next[questionIndex] };
            question.choice_type = value;
            next[questionIndex] = question;
            return next;
        });
    };

    const handleToggleRequired = (questionIndex) => {
        setQuestions(prev => {
            const next = [...prev];
            next[questionIndex] = {
                ...next[questionIndex],
                is_required: !next[questionIndex].is_required
            };
            return next;
        });
    };

    const handleSelectQuestion = (index) => {
        setActiveQuestionIndex(index);
    };

    const handleDuplicateQuestion = (index) => {
        if (!questions[index]) return;
        const cloned = {
            ...questions[index],
            id: `temp_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`,
            options: (questions[index].options || []).map(opt => createEmptyOption(opt.option_text))
        };
        const next = [...questions];
        next.splice(index + 1, 0, cloned);
        setQuestions(next);
        setActiveQuestionIndex(index + 1);
        clearError('questions');
    };

    const handleDeleteQuestion = (index) => {
        setQuestions(prev => prev.filter((_, i) => i !== index));
        setActiveQuestionIndex(prev => {
            if (prev === null) return prev;
            if (index < prev) return prev - 1;
            if (index === prev) return null;
            return prev;
        });
        clearQuestionErrors();
        clearError('questions');
    };

    const handleRefreshQuestion = async (questionIndex) => {
        try {
            // Th√™m questionIndex v√†o set ƒëang refresh
            setRefreshingQuestions(prev => new Set([...prev, questionIndex]));

            // T·ªëi ∆∞u: T·∫°o 3 c√¢u h·ªèi nhanh, l·∫•y c√¢u ƒë·∫ßu (Gemini ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh v·ªõi 3+ c√¢u)
            const requestData = {
                title: `C√¢u h·ªèi thay th·∫ø`,
                description: `T·∫°o l·∫°i c√¢u h·ªèi v·ªÅ ${form.category_name || "ch·ªß ƒë·ªÅ n√†y"}`,
                categoryName: form.category_name || "General",
                aiPrompt: `T·∫°o kh·∫£o s√°t v·ªÅ ${form.ai_context}, t·∫≠p trung v√†o ${form.category_name || "ch·ªß ƒë·ªÅ n√†y"} d√†nh cho ${form.target_audience || "kh√°ch h√†ng"}, bao g·ªìm c√¢u h·ªèi ƒë√°nh gi√° v√† √Ω ki·∫øn ph·∫£n h·ªìi`,
                targetAudience: form.target_audience || "Kh√°ch h√†ng",
                numberOfQuestions: 3 // T·∫°o 3 c√¢u ·ªïn ƒë·ªãnh, l·∫•y c√¢u ƒë·∫ßu ƒë·ªÉ thay th·∫ø
            };

            console.log("üîÑ Regenerating question:", requestData);

            const response = await aiSurveyService.generateSurvey(requestData);

            if (response.success && response.generated_survey && response.generated_survey.questions && response.generated_survey.questions.length > 0) {
                // L·∫•y c√¢u h·ªèi ƒë·∫ßu ti√™n t·ª´ response
                const aiQuestion = response.generated_survey.questions[0];

                // Map response v·ªÅ format frontend
                const newQuestion = {
                    id: `temp_${Date.now()}_${questionIndex}`,
                    question_text: aiQuestion.question_text,
                    question_type: mapTypeFromBackend(aiQuestion.question_type),
                    is_required: aiQuestion.is_required ?? true,
                    options: aiQuestion.options ? aiQuestion.options.map((opt, optIndex) => ({
                        id: `temp_option_${Date.now()}_${optIndex}`,
                        option_text: opt.option_text
                    })) : []
                };

                // Add special handling for question types
                if (newQuestion.question_type === 'multiple_choice') {
                    newQuestion.choice_type = 'multiple';
                    if (newQuestion.options.length === 0) {
                        newQuestion.options = createDefaultOptions();
                    }
                } else if (newQuestion.question_type === 'single_choice') {
                    newQuestion.choice_type = 'single';
                    if (newQuestion.options.length === 0) {
                        newQuestion.options = createDefaultOptions();
                    }
                } else if ((newQuestion.question_type === 'boolean_' || newQuestion.question_type === 'yes_no') && newQuestion.options.length === 0) {
                    newQuestion.options = createYesNoOptions();
                } else if (newQuestion.question_type === 'ranking') {
                    if (newQuestion.options.length === 0) {
                        newQuestion.options = createDefaultOptions();
                    }
                } else if (newQuestion.question_type === 'rating') {
                    newQuestion.rating_scale = 5;
                }

                // Update the question in the questions array
                setQuestions(prev => {
                    const next = [...prev];
                    next[questionIndex] = newQuestion;
                    return next;
                });

                console.log("‚úÖ Question regenerated:", newQuestion);
            } else {
                throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi m·ªõi');
            }

        } catch (error) {
            console.error('‚ùå Error refreshing question:', error);

            let errorMessage = 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.';
            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            alert(errorMessage);
        } finally {
            // X√≥a questionIndex kh·ªèi set ƒëang refresh
            setRefreshingQuestions(prev => {
                const next = new Set(prev);
                next.delete(questionIndex);
                return next;
            });
        }
    };

    const handleSaveSurvey = async () => {
        // NgƒÉn vi·ªác g·ªçi h√†m nhi·ªÅu l·∫ßn ƒë·ªìng th·ªùi
        if (isSavingRef.current || loading) {
            console.log('‚ö†Ô∏è Save operation already in progress, ignoring duplicate call');
            return;
        }

        if (!validateQuestions()) return;

        // ƒê√°nh d·∫•u ƒëang l∆∞u
        isSavingRef.current = true;
        setLoading(true);

        try {
            // 1. T·∫°o survey tr∆∞·ªõc
            const surveyPayload = {
                title: form.title,
                description: form.description,
                categoryId: 1, // T·∫°m th·ªùi d√πng default category
                aiPrompt: form.ai_context
            };

            console.log('üîÑ Creating survey:', surveyPayload);
            const savedSurvey = await surveyService.createSurvey(surveyPayload);

            if (!savedSurvey || !savedSurvey.id) {
                throw new Error('Kh√¥ng th·ªÉ l∆∞u kh·∫£o s√°t');
            }

            const surveyId = savedSurvey.id;
            console.log('‚úÖ Survey created with ID:', surveyId);

            // 2. T·∫°o t·∫•t c·∫£ questions song song (ch·ªâ t·∫°o nh·ªØng c√¢u h·ªèi ch∆∞a ƒë∆∞·ª£c l∆∞u)
            const questionPromises = questions
                .filter(question => {
                    // Ch·ªâ t·∫°o nh·ªØng c√¢u h·ªèi c√≥ ID temp_ (ch∆∞a ƒë∆∞·ª£c l∆∞u) ho·∫∑c kh√¥ng c√≥ ID
                    return !question.id || question.id.toString().startsWith('temp_');
                })
                .map(question => {
                    const questionPayload = {
                        surveyId: surveyId,
                        questionText: question.question_text,
                        questionType: mapTypeToBackend(question.question_type),
                        isRequired: question.is_required || false
                    };
                    return questionService.createQuestion(questionPayload);
                });

            if (questionPromises.length === 0) {
                console.log('‚ö†Ô∏è No new questions to create');
            } else {
                const savedQuestions = await Promise.all(questionPromises);
                console.log('‚úÖ Questions created:', savedQuestions.length);

                // 3. T·∫°o t·∫•t c·∫£ options song song (ch·ªâ t·∫°o options m·ªõi)
                const optionPromises = [];
                savedQuestions.forEach((savedQuestion, savedIndex) => {
                    // T√¨m originalQuestion t∆∞∆°ng ·ª©ng
                    const originalQuestions = questions.filter(q => !q.id || q.id.toString().startsWith('temp_'));
                    const originalQuestion = originalQuestions[savedIndex];
                    
                    if (originalQuestion && originalQuestion.options?.length > 0) {
                        originalQuestion.options.forEach(option => {
                            // Ch·ªâ t·∫°o option m·ªõi (c√≥ ID temp_ ho·∫∑c kh√¥ng c√≥ ID)
                            if ((!option.id || option.id.toString().startsWith('temp_option_')) && option.option_text.trim()) {
                                optionPromises.push(
                                    optionService.createOption({
                                        questionId: savedQuestion.id,
                                        optionText: option.option_text
                                    })
                                );
                            }
                        });
                    }
                });

                if (optionPromises.length > 0) {
                    await Promise.all(optionPromises);
                    console.log('‚úÖ Options created:', optionPromises.length);
                }
            }

            // 4. C·∫≠p nh·∫≠t status n·∫øu c·∫ßn
            await surveyService.updateSurvey(surveyId, { status: 'draft' });

            alert('‚úÖ L∆∞u kh·∫£o s√°t th√†nh c√¥ng!');

            // Redirect v·ªÅ dashboard ho·∫∑c survey list
            navigate('/dashboard');

        } catch (error) {
            console.error('‚ùå Error saving survey:', error);

            let errorMessage = 'Kh√¥ng th·ªÉ l∆∞u kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i.';
            if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
            } else if (error.message) {
                errorMessage = error.message;
            }

            alert('‚ùå ' + errorMessage);
        } finally {
            setLoading(false);
            isSavingRef.current = false; // Reset flag
        }
    };

    const handleBackToForm = () => {
        // X√≥a d·ªØ li·ªáu t·∫°m th·ªùi n·∫øu c√≥
        localStorage.removeItem('aiSurveyTempData');
        setShowForm(true);
        setQuestions([]);
        setActiveQuestionIndex(null);
    };

    // Build preview survey xem tr∆∞·ªõc kh·∫£o s√°t ResponseFormPage
    const buildPreviewSurvey = () => {
        const mappedQuestions = questions.map(q => {
            let type = 'open-ended';
            if (q.question_type === 'multiple_choice') {
                type = q.choice_type === 'multiple' ? 'multiple-choice-multiple' : 'multiple-choice-single';
            } else if (q.question_type === 'single_choice') {
                type = 'multiple-choice-single';
            } else if (q.question_type === 'boolean_' || q.question_type === 'yes_no') {
                type = 'boolean';
            } else if (q.question_type === 'ranking') {
                type = 'ranking';
            } else if (q.question_type === 'rating') {
                type = 'rating-scale';
            } else if (q.question_type === 'date_time') {
                type = 'date_time';
            } else if (q.question_type === 'file_upload') {
                type = 'file_upload';
            } else if (q.question_type === 'open_ended') {
                type = 'open-ended';
            }
            // Map options to {id, text} format for ResponseFormPage
            let options = undefined;
            if (q.options && q.options.length > 0) {
                options = q.options.map((o, idx) => {
                    // Handle both object and string formats
                    if (typeof o === 'string') {
                        return {
                            id: `temp_${q.id}_${idx}`,
                            text: o
                        };
                    }
                    return {
                        id: o.id || `temp_${q.id}_${idx}`,
                        text: o.option_text || o.text || ''
                    };
                });
            }
            return {
                id: q.id || `temp_q_${Date.now()}_${Math.random()}`,
                text: q.question_text || 'C√¢u h·ªèi',
                type,
                options,
                scale: q.question_type === 'rating' ? [1, 2, 3, 4, 5] : undefined,
                is_required: !!q.is_required
            };
        }).filter(q => q.text && q.text.trim() !== ''); // Filter out empty questions
        
        return {
            id: 'ai-preview',
            title: form.title || 'Xem tr∆∞·ªõc kh·∫£o s√°t AI',
            description: form.description || '',
            questions: mappedQuestions
        };
    };

    const handlePreview = () => {
        try {
            // Validate before preview
            if (!questions || questions.length === 0) {
                alert('Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë·ªÉ xem tr∆∞·ªõc. Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt c√¢u h·ªèi.');
                return;
            }

            const preview = buildPreviewSurvey();
            
            // Validate preview data
            if (!preview || !preview.questions || preview.questions.length === 0) {
                alert('Kh√¥ng th·ªÉ t·∫°o xem tr∆∞·ªõc. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c c√¢u h·ªèi.');
                return;
            }

            console.log('Preview data:', preview); // Debug log

            // L∆∞u d·ªØ li·ªáu t·∫°m th·ªùi v√†o localStorage ƒë·ªÉ c√≥ th·ªÉ quay l·∫°i
            const tempData = {
                form: form,
                questions: questions,
                activeQuestionIndex: activeQuestionIndex,
                timestamp: Date.now()
            };
            localStorage.setItem('aiSurveyTempData', JSON.stringify(tempData));

            navigate('/response-preview', { state: { survey: preview } });
        } catch (error) {
            console.error('Error in handlePreview:', error);
            alert('C√≥ l·ªói x·∫£y ra khi t·∫°o xem tr∆∞·ªõc. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const activeQuestion = activeQuestionIndex !== null ? questions[activeQuestionIndex] : null;
    const activeQuestionNumber = activeQuestionIndex !== null ? activeQuestionIndex + 1 : null;
    const activeQuestionError = activeQuestionIndex !== null ? errors[`question_${activeQuestionIndex}`] : null;
    const activeQuestionOptionError = activeQuestionIndex !== null ? errors[`question_${activeQuestionIndex}_options`] : null;
    const isMultipleChoice = activeQuestion?.question_type === 'multiple_choice';
    const isSingleChoice = activeQuestion?.question_type === 'single_choice';
    const isBoolean = activeQuestion?.question_type === 'boolean_' || activeQuestion?.question_type === 'yes_no';
    const isRanking = activeQuestion?.question_type === 'ranking';
    const isRating = activeQuestion?.question_type === 'rating';
    const isDateTime = activeQuestion?.question_type === 'date_time';
    const isFileUpload = activeQuestion?.question_type === 'file_upload';
    const isOpenEnded = activeQuestion?.question_type === 'open_ended';

    return (
        <MainLayout>
            {showForm ? (
                <div className="ai-container">
                    <h2 className="ai-title">T·∫°o kh·∫£o s√°t th√¥ng minh v·ªõi AI</h2>
                    <p className="ai-subtitle">Cung c·∫•p th√¥ng tin ƒë·ªÉ AI t·∫°o b·ªô c√¢u h·ªèi ph√π h·ª£p.</p>

                    <div className="ai-form-card">
                        <div className="ai-form-row">
                            <label>Ti√™u ƒë·ªÅ kh·∫£o s√°t <span className="req">*</span></label>
                            <input
                                value={form.title}
                                onChange={(e) => handleFormChange('title', e.target.value)}
                                placeholder="Nh·∫≠p ti√™u ƒë·ªÅ kh·∫£o s√°t"
                                className={errors.title ? 'error' : ''}
                            />
                            {errors.title && <div className="ai-error">{errors.title}</div>}
                        </div>

                        <div className="ai-form-row category-form-row">
                            <label>Danh m·ª•c kh·∫£o s√°t <span className="req">*</span></label>
                            <div className="category-input-wrapper" style={{ position: 'relative' }}>
                                <input
                                    value={form.category_name}
                                    onChange={(e) => handleCategoryInputChange(e.target.value)}
                                    onBlur={handleCategoryBlur}
                                    placeholder="Nh·∫≠p ho·∫∑c ch·ªçn danh m·ª•c (VD: Kh·∫£o s√°t kh√°ch h√†ng)"
                                    className={errors.category_name ? 'error' : ''}
                                    autoComplete="off"
                                />

                                {/* Auto-complete dropdown */}
                                {showCategoryDropdown && filteredCategories.length > 0 && (
                                    <div className="category-dropdown">
                                        {filteredCategories.map((cat, index) => (
                                            <div
                                                key={cat.categoryId || cat.id || index}
                                                className="category-dropdown-item"
                                                onClick={() => handleCategorySelect(cat)}
                                            >
                                                {cat.categoryName || cat.name || 'Kh√¥ng c√≥ t√™n'}
                                            </div>
                                        ))}
                                    </div>
                                )}

                                <small className="field-hint">
                                    B·∫°n c√≥ th·ªÉ nh·∫≠p danh m·ª•c m·ªõi ho·∫∑c ch·ªçn t·ª´ danh s√°ch g·ª£i √Ω
                                </small>
                            </div>
                            {errors.category_name && <div className="ai-error">{errors.category_name}</div>}
                        </div>

                        <div className="ai-form-row">
                            <label>M√¥ t·∫£ kh·∫£o s√°t</label>
                            <textarea
                                value={form.description}
                                onChange={(e) => handleFormChange('description', e.target.value)}
                                placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ m·ª•c ƒë√≠ch kh·∫£o s√°t"
                                rows={3}
                            />
                        </div>

                        <div className="ai-form-row-group">
                            <div className="ai-form-row ai-form-row--half">
                                <label>ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u</label>
                                <input
                                    value={form.target_audience}
                                    onChange={(e) => handleFormChange('target_audience', e.target.value)}
                                    placeholder="VD: H·ªçc sinh l·ªõp 12, Nh√¢n vi√™n vƒÉn ph√≤ng..."
                                />
                                <small className="field-hint">Gi√∫p AI t·∫°o c√¢u h·ªèi ph√π h·ª£p v·ªõi ƒë·ªëi t∆∞·ª£ng</small>
                            </div>

                            <div className="ai-form-row ai-form-row--half">
                                <label>S·ªë l∆∞·ª£ng c√¢u h·ªèi <span className="req">*</span></label>
                                <input
                                    type="number"
                                    min="3"
                                    max="20"
                                    value={form.question_count || 5}
                                    onChange={(e) => handleFormChange('question_count', e.target.value)}
                                    placeholder="3-20"
                                    className={errors.question_count ? 'error' : ''}
                                />
                                {errors.question_count && <div className="ai-error">{errors.question_count}</div>}
                            </div>
                        </div>

                        <div className="ai-form-row">
                            <label>Ng·ªØ c·∫£nh chi ti·∫øt cho AI <span className="req">*</span></label>
                            <textarea
                                rows={6}
                                value={form.ai_context}
                                onChange={(e) => handleFormChange('ai_context', e.target.value)}
                                placeholder={`V√≠ d·ª•: "T·∫°o kh·∫£o s√°t ƒë√°nh gi√° m·ª©c ƒë·ªô h√†i l√≤ng c·ªßa nh√¢n vi√™n IT v·ªÅ m√¥i tr∆∞·ªùng l√†m vi·ªác t·∫°i c√¥ng ty c√¥ng ngh·ªá"`}
                                className={errors.ai_context ? 'error' : ''}
                            />
                            {errors.ai_context && <div className="ai-error">{errors.ai_context}</div>}
                        </div>

                        <div className="ai-actions">
                            <button className="btn-primary" onClick={handleGenerateQuestions} disabled={loading}>
                                {loading ? 'ƒêang t·∫°o g·ª£i √Ω‚Ä¶' : 'T·∫°o g·ª£i √Ω b·∫±ng AI'}
                            </button>
                        </div>
                    </div>
                </div>
            ) : (
                <div className="create-survey-wrapper">
                    <div className="survey-toolbar">
                        <div className="survey-toolbar-left">
                            <button
                                className="btn-top btn-ghost"
                                type="button"
                                onClick={handleBackToForm}
                            >
                                ‚Üê Quay l·∫°i form AI
                            </button>
                        </div>
                        <div className="survey-toolbar-right">
                            <button
                                className="btn-view"
                                type="button"
                                onClick={handlePreview}
                                disabled={questions.length === 0}
                                title="Xem tr∆∞·ªõc kh·∫£o s√°t"
                            >
                                <i className="fa-regular fa-eye" aria-hidden="true"></i>
                                <span> Xem tr∆∞·ªõc</span>
                            </button>
                            <button
                                className={`btn-mobile-view ${showMobileView ? 'active' : ''}`}
                                type="button"
                                onClick={() => setShowMobileView(!showMobileView)}
                                disabled={questions.length === 0}
                                title="Xem tr∆∞·ªõc tr√™n Mobile"
                            >
                                <i className="fa-solid fa-mobile-screen-button" aria-hidden="true"></i>
                                <span> Mobile</span>
                            </button>
                            <button
                                className="btn-share"
                                type="button"
                                onClick={handleSaveSurvey}
                                disabled={loading}
                            >
                                <i className="fa-solid fa-share-nodes" aria-hidden="true"></i>
                                <span>L∆∞u kh·∫£o s√°t</span>
                            </button>
                        </div>
                    </div>

                    {hasErrors && (
                        <div className="survey-error-banner" role="alert">
                            <div className="survey-error-title">Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin</div>
                            <ul>
                                {errors.title && <li>{errors.title}</li>}
                                {errors.questions && <li>{errors.questions}</li>}
                            </ul>
                        </div>
                    )}

                    <div className="survey-info-card compact">
                        <div className="survey-form-grid">
                            <div className="survey-field survey-field--full">
                                <label className="field-label">
                                    Ti√™u ƒë·ªÅ kh·∫£o s√°t <span className="field-required">*</span>
                                </label>
                                <input
                                    className={`survey-title-input ${errors.title ? 'error' : ''}`}
                                    value={form.title}
                                    onChange={(e) => handleFormChange('title', e.target.value)}
                                    placeholder="Ti√™u ƒë·ªÅ kh·∫£o s√°t"
                                />
                                {errors.title && <p className="error-message">{errors.title}</p>}
                            </div>
                        </div>
                        <div className="survey-field survey-field--full">
                            <label className="field-label">M√¥ t·∫£</label>
                            <textarea
                                className="survey-desc-input"
                                value={form.description}
                                onChange={(e) => handleFormChange('description', e.target.value)}
                                placeholder="M√¥ t·∫£ kh·∫£o s√°t..."
                                rows={3}
                            />
                        </div>
                    </div>

                    <div className="survey-editor">
                        <div className="survey-sidebar">
                            <div className="sidebar-header">
                                <h3>Danh s√°ch c√¢u h·ªèi AI</h3>
                                <span className="sidebar-count">{questions.length}</span>
                            </div>
                            {questions.length === 0 ? (
                                <div className="sidebar-empty">Ch∆∞a c√≥ c√¢u h·ªèi</div>
                            ) : (
                                <div>
                                    {questions.map((q, idx) => (
                                        <div
                                            key={q.id}
                                            className={`sidebar-item ${idx === activeQuestionIndex ? 'is-active' : ''}`}
                                            onClick={() => handleSelectQuestion(idx)}
                                        >
                                            <div className="sidebar-item-body">
                                                <span className="sidebar-number">C√¢u {idx + 1}</span>
                                                <span className="sidebar-text" title={q.question_text || 'Ch∆∞a c√≥ n·ªôi dung'}>
                                                    {q.question_text || 'Ch∆∞a c√≥ n·ªôi dung'}
                                                </span>
                                            </div>
                                            <div className="sidebar-item-actions">
                                                <button
                                                    type="button"
                                                    className="sidebar-item-btn"
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        handleDuplicateQuestion(idx);
                                                    }}
                                                    aria-label="Nh√¢n ƒë√¥i c√¢u h·ªèi"
                                                    title="Nh√¢n ƒë√¥i c√¢u h·ªèi"
                                                >
                                                    <i className="fa-regular fa-clone" aria-hidden="true"></i>
                                                </button>
                                                <button
                                                    type="button"
                                                    className="sidebar-item-btn danger"
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√¢u h·ªèi n√†y kh√¥ng?')) {
                                                            handleDeleteQuestion(idx);
                                                        }
                                                    }}
                                                    aria-label="X√≥a c√¢u h·ªèi"
                                                    title="X√≥a c√¢u h·ªèi"
                                                >
                                                    <i className="fa-solid fa-trash" aria-hidden="true"></i>
                                                </button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>

                        <div className="survey-main">
                            <div className="questions-container">
                                {errors.questions && (
                                    <p className="error-message">{errors.questions}</p>
                                )}
                                {questions.length === 0 ? (
                                    <div className="questions-empty">
                                        <i className="fa-regular fa-circle-question survey-empty-icon" title="Ch∆∞a c√≥ c√¢u h·ªèi n√†o"></i>
                                        <p>Ch∆∞a c√≥ c√¢u h·ªèi n√†o</p>
                                    </div>
                                ) : !activeQuestion ? (
                                    <div className="question-placeholder">
                                        Ch·ªçn m·ªôt c√¢u h·ªèi ·ªü danh s√°ch b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a.
                                    </div>
                                ) : (
                                    <div className="question-editor-card">
                                        <div className="question-editor-header">
                                            <span className="question-editor-pill">C√¢u {activeQuestionNumber}</span>
                                            <div className="question-editor-actions">
                                                <button
                                                    type="button"
                                                    className="question-action-btn"
                                                    onClick={() => handleRefreshQuestion(activeQuestionIndex)}
                                                    disabled={refreshingQuestions.has(activeQuestionIndex)}
                                                    title="T·∫°o l·∫°i c√¢u h·ªèi"
                                                >
                                                    {refreshingQuestions.has(activeQuestionIndex) ? (
                                                        <>
                                                            <i className="fa-solid fa-spinner fa-spin" aria-hidden="true"></i>
                                                            ƒêang t·∫°o l·∫°i...
                                                        </>
                                                    ) : (
                                                        <>
                                                            <i className="fa-solid fa-arrows-rotate" aria-hidden="true"></i>
                                                            T·∫°o l·∫°i
                                                        </>
                                                    )}
                                                </button>
                                            </div>
                                        </div>

                                        <div className="question-editor-body">
                                            <label className="question-label">N·ªôi dung c√¢u h·ªèi</label>
                                            <textarea
                                                className={`question-input ${activeQuestionError ? 'error' : ''}`}
                                                value={activeQuestion.question_text}
                                                onChange={(e) => handleQuestionTextChange(activeQuestionIndex, e.target.value)}
                                                placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi"
                                                rows={3}
                                            />
                                            {activeQuestionError && (
                                                <p className="error-message">{activeQuestionError}</p>
                                            )}

                                            {isOpenEnded && (
                                                <div className="question-helper">
                                                    Ng∆∞·ªùi tham gia s·∫Ω nh·∫≠p c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn cho c√¢u h·ªèi n√†y.
                                                </div>
                                            )}
                                            
                                            {isDateTime && (
                                                <>
                                                    <div className="question-helper">
                                                        Ng∆∞·ªùi tham gia s·∫Ω ch·ªçn ng√†y v√† gi·ªù.
                                                    </div>
                                                    <div className="editor-section">
                                                        <div className="editor-section-header">
                                                            <span className="section-title">Xem tr∆∞·ªõc</span>
                                                        </div>
                                                        <div className="date-time-inputs">
                                                            <input type="date" disabled className="preview-input" />
                                                            <input type="time" disabled className="preview-input" />
                                                        </div>
                                                    </div>
                                                </>
                                            )}
                                            
                                            {isFileUpload && (
                                                <>
                                                    <div className="question-helper">
                                                        Ng∆∞·ªùi tham gia s·∫Ω t·∫£i file l√™n cho c√¢u h·ªèi n√†y.
                                                    </div>
                                                    <div className="editor-section">
                                                        <div className="editor-section-header">
                                                            <span className="section-title">Xem tr∆∞·ªõc</span>
                                                        </div>
                                                        <div className="file-upload-preview">
                                                            <div className="upload-zone-preview">
                                                                <i className="fa-solid fa-cloud-arrow-up upload-icon"></i>
                                                                <p className="upload-text">
                                                                    <span>Nh·∫•p ho·∫∑c k√©o th·∫£ file v√†o ƒë√¢y</span>
                                                                </p>
                                                                <p className="upload-hint">ƒê·ªãnh d·∫°ng: PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, TXT, ZIP, RAR (T·ªëi ƒëa 10MB)</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </>
                                            )}
                                            
                                            {isRanking && (
                                                <div className="question-helper">
                                                    Ng∆∞·ªùi tham gia s·∫Ω s·∫Øp x·∫øp c√°c l·ª±a ch·ªçn theo th·ª© t·ª± ∆∞u ti√™n.
                                                </div>
                                            )}
                                            
                                            {isSingleChoice && (
                                                <div className="question-helper">
                                                    Ng∆∞·ªùi tham gia s·∫Ω ch·ªçn m·ªôt l·ª±a ch·ªçn t·ª´ danh s√°ch.
                                                </div>
                                            )}

                                            {isMultipleChoice && (
                                                <div className="editor-section">
                                                    <div className="editor-section-header">
                                                        <span className="section-title">L·ª±a ch·ªçn tr·∫£ l·ªùi</span>
                                                        <button
                                                            type="button"
                                                            className="add-option"
                                                            onClick={() => handleAddOption(activeQuestionIndex)}
                                                        >
                                                            + Th√™m l·ª±a ch·ªçn
                                                        </button>
                                                    </div>
                                                    <div className="options-list">
                                                        {activeQuestion.options?.map((opt, oIdx) => (
                                                            <div key={opt.id || oIdx} className="option-item">
                                                                <span className="option-index">{oIdx + 1}</span>
                                                                <input
                                                                    className={`option-input ${activeQuestionOptionError ? 'error' : ''}`}
                                                                    value={opt.option_text}
                                                                    onChange={(e) => handleOptionChange(activeQuestionIndex, oIdx, e.target.value)}
                                                                    placeholder={`L·ª±a ch·ªçn ${oIdx + 1}`}
                                                                />
                                                                <button
                                                                    type="button"
                                                                    className="remove-option"
                                                                    onClick={() => {
                                                                        if (activeQuestion.options.length <= 2) return;
                                                                        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ª±a ch·ªçn n√†y kh√¥ng?')) {
                                                                            handleDeleteOption(activeQuestionIndex, oIdx);
                                                                        }
                                                                    }}
                                                                    disabled={activeQuestion.options.length <= 2}
                                                                    aria-label="X√≥a l·ª±a ch·ªçn"
                                                                >
                                                                    <i className="fa-solid fa-delete-left" aria-hidden="true"></i>
                                                                </button>
                                                            </div>
                                                        ))}
                                                    </div>
                                                    {activeQuestionOptionError && (
                                                        <p className="error-message">{activeQuestionOptionError}</p>
                                                    )}
                                                </div>
                                            )}

                                            {isSingleChoice && (
                                                <div className="editor-section">
                                                    <div className="editor-section-header">
                                                        <span className="section-title">L·ª±a ch·ªçn tr·∫£ l·ªùi</span>
                                                        <button
                                                            type="button"
                                                            className="add-option"
                                                            onClick={() => handleAddOption(activeQuestionIndex)}
                                                        >
                                                            + Th√™m l·ª±a ch·ªçn
                                                        </button>
                                                    </div>
                                                    <div className="options-list">
                                                        {activeQuestion.options?.map((opt, oIdx) => (
                                                            <div key={opt.id || oIdx} className="option-item">
                                                                <span className="option-index">{oIdx + 1}</span>
                                                                <input
                                                                    className={`option-input ${activeQuestionOptionError ? 'error' : ''}`}
                                                                    value={opt.option_text}
                                                                    onChange={(e) => handleOptionChange(activeQuestionIndex, oIdx, e.target.value)}
                                                                    placeholder={`L·ª±a ch·ªçn ${oIdx + 1}`}
                                                                />
                                                                <button
                                                                    type="button"
                                                                    className="remove-option"
                                                                    onClick={() => {
                                                                        if (activeQuestion.options.length <= 2) return;
                                                                        if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ª±a ch·ªçn n√†y kh√¥ng?')) {
                                                                            handleDeleteOption(activeQuestionIndex, oIdx);
                                                                        }
                                                                    }}
                                                                    disabled={activeQuestion.options.length <= 2}
                                                                    aria-label="X√≥a l·ª±a ch·ªçn"
                                                                >
                                                                    <i className="fa-solid fa-delete-left" aria-hidden="true"></i>
                                                                </button>
                                                            </div>
                                                        ))}
                                                    </div>
                                                    {activeQuestionOptionError && (
                                                        <p className="error-message">{activeQuestionOptionError}</p>
                                                    )}
                                                </div>
                                            )}

                                            {isRanking && (
                                                <div className="editor-section">
                                                    <div className="editor-section-header">
                                                        <span className="section-title">L·ª±a ch·ªçn ƒë·ªÉ x·∫øp h·∫°ng</span>
                                                        <button
                                                            type="button"
                                                            className="add-option"
                                                            onClick={() => handleAddOption(activeQuestionIndex)}
                                                        >
                                                            + Th√™m l·ª±a ch·ªçn
                                                        </button>
                                                    </div>
                                                    <DndContext
                                                        sensors={sensors}
                                                        collisionDetection={closestCenter}
                                                        onDragEnd={(event) => {
                                                            const { active, over } = event;
                                                            if (!over || active.id === over.id) return;

                                                            const oldIndex = activeQuestion.options.findIndex(opt => opt.id === active.id);
                                                            const newIndex = activeQuestion.options.findIndex(opt => opt.id === over.id);
                                                            
                                                            const newOptions = arrayMove(activeQuestion.options, oldIndex, newIndex);
                                                            setQuestions(prev => {
                                                                const next = [...prev];
                                                                next[activeQuestionIndex] = { ...next[activeQuestionIndex], options: newOptions };
                                                                return next;
                                                            });
                                                        }}
                                                    >
                                                        <SortableContext
                                                            items={activeQuestion.options?.map(opt => opt.id) || []}
                                                            strategy={verticalListSortingStrategy}
                                                        >
                                                            <div className="ranking-options-list">
                                                                {activeQuestion.options?.map((opt, oIdx) => (
                                                                    <SortableRankingOption
                                                                        key={opt.id}
                                                                        id={opt.id}
                                                                        index={oIdx}
                                                                        option={opt}
                                                                        error={activeQuestionOptionError}
                                                                        onTextChange={(value) => handleOptionChange(activeQuestionIndex, oIdx, value)}
                                                                        onDelete={() => {
                                                                            if (activeQuestion.options.length <= 2) return;
                                                                            if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a l·ª±a ch·ªçn n√†y kh√¥ng?')) {
                                                                                handleDeleteOption(activeQuestionIndex, oIdx);
                                                                            }
                                                                        }}
                                                                        disabled={activeQuestion.options.length <= 2}
                                                                        onMoveUp={() => handleMoveOptionUp(activeQuestionIndex, oIdx)}
                                                                        onMoveDown={() => handleMoveOptionDown(activeQuestionIndex, oIdx)}
                                                                        totalCount={activeQuestion.options.length}
                                                                    />
                                                                ))}
                                                            </div>
                                                        </SortableContext>
                                                    </DndContext>
                                                    {activeQuestionOptionError && (
                                                        <p className="error-message">{activeQuestionOptionError}</p>
                                                    )}
                                                </div>
                                            )}

                                            {isBoolean && (
                                                <div className="editor-section">
                                                    <div className="editor-section-header">
                                                        <span className="section-title">Tu·ª≥ ch·ªânh nh√£n</span>
                                                    </div>
                                                    <div className="options-list two-column">
                                                        {activeQuestion.options?.map((opt, oIdx) => (
                                                            <div key={opt.id || oIdx} className="option-item soft">
                                                                <span className="option-index">{oIdx === 0 ? 'Yes' : 'No'}</span>
                                                                <input
                                                                    className={`option-input ${activeQuestionOptionError ? 'error' : ''}`}
                                                                    value={opt.option_text}
                                                                    onChange={(e) => handleOptionChange(activeQuestionIndex, oIdx, e.target.value)}
                                                                    placeholder={oIdx === 0 ? 'C√≥' : 'Kh√¥ng'}
                                                                />
                                                            </div>
                                                        ))}
                                                    </div>
                                                    {activeQuestionOptionError && (
                                                        <p className="error-message">{activeQuestionOptionError}</p>
                                                    )}
                                                </div>
                                            )}

                                            {isRating && (
                                                <div className="editor-section">
                                                    <div className="editor-section-header">
                                                        <span className="section-title">ƒê√°nh gi√° (t·ªëi ƒëa 5 sao)</span>
                                                    </div>
                                                    <div className="rating-preview">
                                                        {Array.from({ length: 5 }).map((_, idx) => (
                                                            <span key={idx} className="rating-star">‚òÖ</span>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}
                            </div>
                        </div>

                        <aside className="right-sidebar-answer">
                            {activeQuestion ? (
                                <>
                                    <div className="answer-panel">
                                        <h3 className="answer-panel-title">Thi·∫øt l·∫≠p c√¢u h·ªèi</h3>
                                        <div className="panel-field">
                                            <label>Lo·∫°i tr·∫£ l·ªùi</label>
                                            <div className="panel-select-wrapper">
                                                <select
                                                    className="panel-select"
                                                    value={activeQuestion.question_type}
                                                    onChange={(e) => handleQuestionTypeChange(activeQuestionIndex, e.target.value)}
                                                >
                                                    {QUESTION_TYPE_OPTIONS.map(option => (
                                                        <option key={option.value} value={option.value}>
                                                            {option.label}
                                                        </option>
                                                    ))}
                                                </select>
                                            </div>
                                        </div>

                                        {/* Ch·∫ø ƒë·ªô l·ª±a ch·ªçn ƒë√£ b·ªã ·∫©n nh∆∞ CreateSurvey */}

                                        {isRating && (
                                            <div className="panel-field">
                                                <label>T·ªëi ƒëa</label>
                                                <div className="rating-scale-chip">5 sao</div>
                                            </div>
                                        )}

                                        <div className="panel-field required-toggle-row">
                                            <div>
                                                <label>B·∫Øt bu·ªôc tr·∫£ l·ªùi</label>
                                                <p className="panel-hint">Ng∆∞·ªùi tham gia ph·∫£i tr·∫£ l·ªùi tr∆∞·ªõc khi ti·∫øp t·ª•c.</p>
                                            </div>
                                            <label className="switch">
                                                <input
                                                    type="checkbox"
                                                    checked={activeQuestion.is_required}
                                                    onChange={() => handleToggleRequired(activeQuestionIndex)}
                                                />
                                                <span className="slider" />
                                            </label>
                                        </div>
                                    </div>

                                    <div className="answer-panel secondary">
                                        <h3 className="answer-panel-title">T·ªïng quan</h3>
                                        <div className="panel-stats-grid">
                                            <div className="stat-chip">
                                                <span className="stat-label">T·ªïng c√¢u</span>
                                                <span className="stat-value">{stats.total}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">B·∫Øt bu·ªôc</span>
                                                <span className="stat-value">{stats.required}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">Tr·∫Øc nghi·ªám nhi·ªÅu</span>
                                                <span className="stat-value">{stats.multipleChoice}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">Tr·∫Øc nghi·ªám m·ªôt</span>
                                                <span className="stat-value">{stats.singleChoice}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">ƒê√∫ng/Sai</span>
                                                <span className="stat-value">{stats.booleanQ}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">X·∫øp h·∫°ng</span>
                                                <span className="stat-value">{stats.ranking}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">ƒê√°nh gi√°</span>
                                                <span className="stat-value">{stats.rating}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">Ng√†y/Gi·ªù</span>
                                                <span className="stat-value">{stats.dateTime}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">T·∫£i file</span>
                                                <span className="stat-value">{stats.fileUpload}</span>
                                            </div>
                                            <div className="stat-chip">
                                                <span className="stat-label">C√¢u h·ªèi m·ªü</span>
                                                <span className="stat-value">{stats.open}</span>
                                            </div>
                                        </div>
                                    </div>
                                </>
                            ) : (
                                <div className="answer-placeholder">
                                    <h3>Ch·ªçn c√¢u h·ªèi</h3>
                                    <p>Nh·∫•p v√†o m·ªôt c√¢u h·ªèi ·ªü danh s√°ch b√™n tr√°i ƒë·ªÉ c·∫•u h√¨nh lo·∫°i tr·∫£ l·ªùi.</p>
                                </div>
                            )}
                        </aside>
                    </div>
                </div>
            )}

            {/* AI Processing Modal */}
            {showProcessingModal && (
                <div className="ai-processing-modal">
                    <div className="ai-processing-content">
                        {/* Header with AI icon and title */}
                        <div className="ai-processing-header">
                            <div className="ai-icon">üí°</div>
                            <h2>AI ƒëang ph√¢n t√≠ch v√† t·∫°o c√¢u h·ªèi</h2>
                            <p>ƒêang t·∫°o c√¢u h·ªèi ph√π h·ª£p</p>
                        </div>

                        {/* Progress bar */}
                        <div className="ai-progress-container">
                            <div className="ai-progress-bar">
                                <div
                                    className="ai-progress-fill"
                                    style={{ width: `${progress}%` }}
                                ></div>
                            </div>
                            <span className="ai-progress-text">{Math.round(progress)}% ho√†n th√†nh</span>
                        </div>

                        {/* Survey Information */}
                        <div className="ai-survey-info">
                            <h3>Th√¥ng tin kh·∫£o s√°t c·ªßa b·∫°n:</h3>
                            <div className="ai-survey-details">
                                <div className="ai-survey-item">
                                    <strong>Ti√™u ƒë·ªÅ:</strong> {form.title}
                                </div>
                                <div className="ai-survey-item">
                                    <strong>M√¥ t·∫£:</strong> {form.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                                </div>
                                <div className="ai-survey-item">
                                    <strong>S·ªë c√¢u h·ªèi:</strong> {form.question_count || 15} c√¢u
                                </div>
                            </div>
                        </div>

                        {/* AI Processing Steps */}
                        <div className="ai-processing-steps">
                            <h3>AI ƒëang th·ª±c hi·ªán:</h3>
                            <div className="ai-steps-list">
                                {[
                                    'Ph√¢n t√≠ch ng·ªØ c·∫£nh v√† m·ª•c ti√™u kh·∫£o s√°t',
                                    'T·∫°o b·ªô c√¢u h·ªèi ph√π h·ª£p',
                                    'T·ªëi ∆∞u h√≥a th·ª© t·ª± v√† logic c√¢u h·ªèi',
                                    'Ho√†n thi·ªán v√† chu·∫©n b·ªã giao di·ªán ch·ªânh s·ª≠a'
                                ].map((step, index) => (
                                    <div
                                        key={index}
                                        className={`ai-step-item ${currentStep > index ? 'completed' : currentStep === index + 1 ? 'active' : ''}`}
                                    >
                                        <div className="ai-step-icon">
                                            {currentStep > index ? '‚úÖ' : currentStep === index + 1 ? 'üîÑ' : (index + 1)}
                                        </div>
                                        <span className="ai-step-label">{step}</span>
                                    </div>
                                ))}
                            </div>
                        </div>

                        {/* Cancel button */}
                        <div className="ai-processing-actions">
                            <button
                                className="ai-cancel-btn"
                                onClick={handleCancelProcessing}
                            >
                                H·ªßy b·ªè v√† quay l·∫°i
                            </button>
                        </div>

                        <div className="ai-footer-note"></div>
                        <em>L∆∞u √Ω: Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t tu·ª≥ thu·ªôc v√†o ƒë·ªô d√†i ng·ªØ c·∫£nh v√† s·ªë l∆∞·ª£ng c√¢u h·ªèi.</em>
                    </div>
                </div>
            )}

            {/* Mobile View Preview Panel */}
            {showMobileView && (
                <div className="mobile-view-overlay" onClick={() => setShowMobileView(false)}>
                    <div className="mobile-view-container" onClick={(e) => e.stopPropagation()}>
                        <div className="mobile-view-header">
                            <h3>Xem tr∆∞·ªõc tr√™n Mobile</h3>
                            <button 
                                className="mobile-view-close" 
                                onClick={() => setShowMobileView(false)}
                                aria-label="ƒê√≥ng xem tr∆∞·ªõc"
                            >
                                <i className="fa-solid fa-xmark" aria-hidden="true"></i>
                            </button>
                        </div>
                        <div className="mobile-view-device">
                            <div className="mobile-view-frame">
                                <div className="mobile-view-content">
                                    {(() => {
                                        const preview = buildPreviewSurvey();
                                        return (
                                            <div style={{ padding: '16px', background: '#fff', minHeight: '100vh' }}>
                                                <div style={{ textAlign: 'center', marginBottom: '24px', paddingBottom: '16px', borderBottom: '1px solid #e5e7eb' }}>
                                                    <h2 style={{ fontSize: '20px', fontWeight: '700', margin: '0 0 8px 0', color: '#1e293b' }}>
                                                        {form.title || 'Ti√™u ƒë·ªÅ kh·∫£o s√°t'}
                                                    </h2>
                                                    {form.description && (
                                                        <p style={{ fontSize: '14px', color: '#64748b', margin: 0 }}>
                                                            {form.description}
                                                        </p>
                                                    )}
                                                </div>
                                                
                                                {preview.questions.map((q, idx) => (
                                                    <div key={q.id || idx} style={{ 
                                                        background: '#f8fafc', 
                                                        border: '1px solid #e2e8f0', 
                                                        borderRadius: '8px', 
                                                        padding: '16px', 
                                                        marginBottom: '16px' 
                                                    }}>
                                                        <h3 style={{ 
                                                            fontSize: '16px', 
                                                            fontWeight: '600', 
                                                            margin: '0 0 12px 0',
                                                            color: '#1e293b' 
                                                        }}>
                                                            {q.text || 'C√¢u h·ªèi'}
                                                            {q.is_required && <span style={{ color: '#ef4444', marginLeft: '4px' }}>*</span>}
                                                        </h3>
                                                        
                                                        {/* Render preview of question type */}
                                                        {(q.type === 'open-ended' || q.type === 'open-text') && (
                                                            <textarea 
                                                                disabled 
                                                                style={{ 
                                                                    width: '100%', 
                                                                    padding: '12px', 
                                                                    border: '1px solid #cbd5e1', 
                                                                    borderRadius: '6px',
                                                                    fontSize: '14px',
                                                                    resize: 'vertical',
                                                                    minHeight: '80px'
                                                                }}
                                                                placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..."
                                                            />
                                                        )}
                                                        
                                                        {(q.type === 'multiple-choice-single' || q.type === 'multiple-choice-multiple' || q.type === 'boolean') && q.options && Array.isArray(q.options) && (
                                                            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                                                                {q.options.map((opt, optIdx) => {
                                                                    const optText = typeof opt === 'string' ? opt : (opt?.text || opt?.option_text || opt?.id || '');
                                                                    const optId = typeof opt === 'object' && opt?.id ? opt.id : optIdx;
                                                                    return (
                                                                        <label key={optId || optIdx} style={{ 
                                                                            display: 'flex', 
                                                                            alignItems: 'center', 
                                                                            gap: '10px',
                                                                            cursor: 'pointer'
                                                                        }}>
                                                                            <input 
                                                                                type={q.type === 'multiple-choice-multiple' ? 'checkbox' : 'radio'} 
                                                                                disabled
                                                                                style={{ width: '18px', height: '18px' }}
                                                                            />
                                                                            <span style={{ fontSize: '14px', color: '#1e293b' }}>
                                                                                {optText}
                                                                            </span>
                                                                        </label>
                                                                    );
                                                                })}
                                                            </div>
                                                        )}
                                                        
                                                        {q.type === 'ranking' && q.options && Array.isArray(q.options) && (
                                                            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                                                                {q.options.map((opt, optIdx) => {
                                                                    const optText = typeof opt === 'string' ? opt : (opt?.text || opt?.option_text || opt?.id || '');
                                                                    const optId = typeof opt === 'object' && opt?.id ? opt.id : optIdx;
                                                                    return (
                                                                        <div key={optId || optIdx} style={{ 
                                                                            display: 'flex', 
                                                                            alignItems: 'center', 
                                                                            gap: '12px',
                                                                            padding: '12px',
                                                                            background: '#fff',
                                                                            border: '1px solid #e2e8f0',
                                                                            borderRadius: '6px'
                                                                        }}>
                                                                            <div style={{ 
                                                                                minWidth: '32px', 
                                                                                height: '32px', 
                                                                                background: 'linear-gradient(135deg, #6366f1, #7c3aed)', 
                                                                                borderRadius: '50%', 
                                                                                display: 'flex', 
                                                                                alignItems: 'center', 
                                                                                justifyContent: 'center',
                                                                                color: '#fff',
                                                                                fontWeight: '600',
                                                                                fontSize: '14px'
                                                                            }}>
                                                                                {optIdx + 1}
                                                                            </div>
                                                                            <span style={{ fontSize: '14px', color: '#1e293b', flex: 1 }}>
                                                                                {optText}
                                                                            </span>
                                                                        </div>
                                                                    );
                                                                })}
                                                            </div>
                                                        )}
                                                        
                                                        {q.type === 'rating-scale' && (
                                                            <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
                                                                {[1, 2, 3, 4, 5].map(num => (
                                                                    <div key={num} style={{
                                                                        width: '40px',
                                                                        height: '40px',
                                                                        borderRadius: '50%',
                                                                        background: '#f1f5f9',
                                                                        border: '2px solid #cbd5e1',
                                                                        display: 'flex',
                                                                        alignItems: 'center',
                                                                        justifyContent: 'center',
                                                                        cursor: 'pointer',
                                                                        fontSize: '16px',
                                                                        fontWeight: '600',
                                                                        color: '#475569'
                                                                    }}>
                                                                        {num}
                                                                    </div>
                                                                ))}
                                                            </div>
                                                        )}
                                                        
                                                        {(q.type === 'date_time' || q.type === 'date-time') && (
                                                            <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                                                                <input 
                                                                    type="date" 
                                                                    disabled 
                                                                    style={{ 
                                                                        flex: 1,
                                                                        minWidth: '120px',
                                                                        padding: '12px',
                                                                        border: '1px solid #cbd5e1',
                                                                        borderRadius: '6px',
                                                                        fontSize: '14px',
                                                                        background: '#f8fafc'
                                                                    }}
                                                                />
                                                                <input 
                                                                    type="time" 
                                                                    disabled 
                                                                    style={{ 
                                                                        flex: 1,
                                                                        minWidth: '120px',
                                                                        padding: '12px',
                                                                        border: '1px solid #cbd5e1',
                                                                        borderRadius: '6px',
                                                                        fontSize: '14px',
                                                                        background: '#f8fafc'
                                                                    }}
                                                                />
                                                            </div>
                                                        )}
                                                        
                                                        {(q.type === 'file_upload' || q.type === 'file-upload') && (
                                                            <div style={{ 
                                                                border: '2px dashed #cbd5e1', 
                                                                borderRadius: '12px',
                                                                padding: '24px',
                                                                textAlign: 'center',
                                                                background: '#f8fafc'
                                                            }}>
                                                                <i className="fa-solid fa-cloud-arrow-up" style={{ fontSize: '32px', color: '#94a3b8', marginBottom: '8px' }}></i>
                                                                <p style={{ fontSize: '14px', color: '#475569', margin: '0 0 4px 0', fontWeight: '600' }}>
                                                                    Nh·∫•p ho·∫∑c k√©o th·∫£ file v√†o ƒë√¢y
                                                                </p>
                                                                <p style={{ fontSize: '12px', color: '#64748b', margin: 0 }}>
                                                                    ƒê·ªãnh d·∫°ng: PDF, DOC, XLS, PPT, TXT, ZIP, RAR
                                                                </p>
                                                            </div>
                                                        )}
                                                    </div>
                                                ))}
                                                
                                                <button 
                                                    type="button"
                                                    disabled
                                                    style={{ 
                                                        width: '100%',
                                                        padding: '14px',
                                                        background: '#e5e7eb',
                                                        border: 'none',
                                                        borderRadius: '8px',
                                                        fontSize: '16px',
                                                        fontWeight: '600',
                                                        color: '#9ca3af',
                                                        cursor: 'not-allowed'
                                                    }}
                                                >
                                                    G·ª≠i kh·∫£o s√°t
                                                </button>
                                            </div>
                                        );
                                    })()}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </MainLayout>
    );
}