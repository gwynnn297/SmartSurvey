import React, { useState, useEffect, useRef } from "react";
import { useLocation } from "react-router-dom";
import MainLayout from "../../layouts/MainLayout";
import "./SentimentPage.css";
import { aiSentimentService } from "../../services/aiSentimentService";
import { responseService } from "../../services/responseService";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts";

const SentimentPage = () => {
  const location = useLocation();
  // Guards to prevent duplicate API calls (StrictMode and concurrent clicks)
  const isFetchingRef = useRef(false);
  const hasLoadedRef = useRef(false);

  // State cho d·ªØ li·ªáu sentiment
  const [sentimentData, setSentimentData] = useState(null);
  const [loading, setLoading] = useState(false);

  // D·ªØ li·ªáu m·∫∑c ƒë·ªãnh khi ch∆∞a c√≥ d·ªØ li·ªáu th·∫≠t
  const defaultStats = {
    total: 0,
    positive: 0,
    neutral: 0,
    negative: 0,
    percent: {
      positive: 0,
      neutral: 0,
      negative: 0,
    },
  };

  // T√≠nh to√°n d·ªØ li·ªáu t·ª´ sentimentData ho·∫∑c d√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
  const stats = sentimentData ? {
    total: sentimentData.total_responses || 0,
    positive: Math.round((sentimentData.positive_percent || 0) * (sentimentData.total_responses || 0) / 100),
    neutral: Math.round((sentimentData.neutral_percent || 0) * (sentimentData.total_responses || 0) / 100),
    negative: Math.round((sentimentData.negative_percent || 0) * (sentimentData.total_responses || 0) / 100),
    percent: {
      positive: sentimentData.positive_percent || 0,
      neutral: sentimentData.neutral_percent || 0,
      negative: sentimentData.negative_percent || 0,
    },
  } : defaultStats;

  const COLORS = ["#22c55e", "#facc15", "#ef4444"];

  // H√†m ƒë·ªÉ t·∫£i d·ªØ li·ªáu sentiment (c√≥ ch·∫∑n g·ªçi tr√πng)
  const loadSentimentData = async () => {
    if (isFetchingRef.current) return;
    try {
      isFetchingRef.current = true;
      setLoading(true);
  
      let surveyId = location.state?.surveyId
        || JSON.parse(localStorage.getItem('userSurveys') || '[]')[0]?.id
        || 1;
  
      console.log('üìä B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu sentiment cho survey:', surveyId);
  
      // L·∫•y s·ªë ph·∫£n h·ªìi v√† d·ªØ li·ªáu sentiment g·∫ßn nh·∫•t
      const currentResponseCount = await responseService.getResponseCount(surveyId);
      const storageKey = `sentiment_count_${surveyId}`;
      const lastResponseCount = parseInt(localStorage.getItem(storageKey) || '0', 10);
      const latest = await aiSentimentService.getLatestSentiment(surveyId);
  
      // üß© 1Ô∏è‚É£ Tr∆∞·ªùng h·ª£p ch∆∞a c√≥ sentiment
      const noExistingSentiment = !latest.success || (latest.total_responses || 0) === 0;
      if (noExistingSentiment) {
        console.log('üÜï Tr∆∞·ªùng h·ª£p 1: Ch∆∞a c√≥ sentiment ‚Üí ch·∫°y ph√¢n t√≠ch ban ƒë·∫ßu');
        try {
          const analyzeResponse = await aiSentimentService.analyzeSentiment(surveyId);
          if (analyzeResponse?.success) {
            setSentimentData(analyzeResponse);
            localStorage.setItem(storageKey, String(currentResponseCount));
            console.log('‚úÖ Ho√†n t·∫•t ph√¢n t√≠ch ban ƒë·∫ßu');
          } else {
            console.warn('‚ö†Ô∏è Ph√¢n t√≠ch ban ƒë·∫ßu th·∫•t b·∫°i ‚Üí d√πng d·ªØ li·ªáu latest');
            setSentimentData(latest);
          }
        } catch (err) {
          console.error('‚ùå L·ªói khi ph√¢n t√≠ch ban ƒë·∫ßu:', err);
          setSentimentData(latest);
        }
        return; // ‚õî D·ª´ng t·∫°i ƒë√¢y, kh√¥ng ch·∫°y ti·∫øp
      }
  
      // üß© 2Ô∏è‚É£ Tr∆∞·ªùng h·ª£p c√≥ sentiment v√† c√≥ ph·∫£n h·ªìi m·ªõi
      if (currentResponseCount > lastResponseCount) {
        console.log('üîÅ Tr∆∞·ªùng h·ª£p 2: C√≥ ph·∫£n h·ªìi m·ªõi ‚Üí ch·∫°y ph√¢n t√≠ch l·∫°i');
        try {
          const analyzeResponse = await aiSentimentService.analyzeSentiment(surveyId);
          if (analyzeResponse?.success) {
            setSentimentData(analyzeResponse);
            localStorage.setItem(storageKey, String(currentResponseCount));
            console.log('‚úÖ Ho√†n t·∫•t ph√¢n t√≠ch l·∫°i');
          } else {
            console.warn('‚ö†Ô∏è Ph√¢n t√≠ch l·∫°i th·∫•t b·∫°i ‚Üí fallback sang latest');
            setSentimentData(latest);
          }
        } catch (err) {
          console.error('‚ùå L·ªói khi ph√¢n t√≠ch l·∫°i:', err);
          setSentimentData(latest);
        }
        return; // ‚õî D·ª´ng t·∫°i ƒë√¢y, kh√¥ng ch·∫°y ti·∫øp
      }
  
      // üß© 3Ô∏è‚É£ Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ph·∫£n h·ªìi m·ªõi
      console.log('‚úÖ Tr∆∞·ªùng h·ª£p 3: Kh√¥ng c√≥ ph·∫£n h·ªìi m·ªõi ‚Üí d√πng d·ªØ li·ªáu sentiment c≈©');
      setSentimentData(latest);
      localStorage.setItem(storageKey, String(currentResponseCount));
      return; // ‚õî D·ª´ng lu√¥n
  
    } catch (error) {
      console.error('L·ªói khi t·∫£i d·ªØ li·ªáu sentiment:', error);
    } finally {
      setLoading(false);
      isFetchingRef.current = false;
    }
  };
  

  // T·ª± ƒë·ªông t·∫£i d·ªØ li·ªáu khi component mount (ch·∫∑n StrictMode g·ªçi 2 l·∫ßn)
  useEffect(() => {
    if (hasLoadedRef.current) return;
    hasLoadedRef.current = true;
    loadSentimentData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);



  const chartData = [
    { name: "T√≠ch c·ª±c", value: stats.percent.positive },
    { name: "Trung l·∫≠p", value: stats.percent.neutral },
    { name: "Ti√™u c·ª±c", value: stats.percent.negative },
  ];

  const feedbacks = [
    { id: 1, sentiment: "T√≠ch c·ª±c", text: "D·ªãch v·ª• tuy·ªát v·ªùi, t√¥i r·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng v√† th√°i ƒë·ªô ph·ª•c v·ª•." },
    { id: 2, sentiment: "T√≠ch c·ª±c", text: "Tr·∫£i nghi·ªám r·∫•t t·ªët, nh√¢n vi√™n th√¢n thi·ªán v√† h·ªó tr·ª£ t·∫≠n t√¨nh." },
    { id: 3, sentiment: "Ti√™u c·ª±c", text: "Th·ªùi gian ph·∫£n h·ªìi h∆°i ch·∫≠m, c·∫ßn c·∫£i thi·ªán th√™m." },
    { id: 4, sentiment: "Trung l·∫≠p", text: "D·ªãch v·ª• ·ªïn, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát." },
  ];

  return (
    <MainLayout>
      <div className="sentiment-container">
        <h1 className="page-title">
          {location.state?.surveyTitle ?
            `Ph√¢n t√≠ch c·∫£m x√∫c: ${location.state.surveyTitle}` :
            'Ph√¢n t√≠ch c·∫£m x√∫c t·ªïng quan'
          }
        </h1>
        <p className="page-subtitle">
          {location.state?.surveyDescription ?
            location.state.surveyDescription :
            'AI ph√¢n t√≠ch c·∫£m x√∫c d·ª±a tr√™n ph·∫£n h·ªìi kh·∫£o s√°t'
          }
        </p>

        <div className="sentiment-summary-grid">
          {/* Bi·ªÉu ƒë·ªì tr√≤n ph√¢n b·ªë c·∫£m x√∫c */}
          <div className="summary-card chart-card">
            <div className="chart-header">
              <h3><i className="fa-solid fa-chart-pie" title="Ph√¢n b·ªë c·∫£m x√∫c"></i> Ph√¢n b·ªë c·∫£m x√∫c</h3>

            </div>
            <div className="chart-wrapper">
              <ResponsiveContainer width="100%" height={240}>
                <PieChart>
                  <Pie
                    data={chartData}
                    dataKey="value"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    labelLine={false}
                    label={({ name, percent }) =>
                      `${name} ${(percent * 100).toFixed(0)}%`
                    }
                  >
                    {chartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value) => `${value}%`} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>

            </div>
          </div>

          {/* Th·ªëng k√™ chi ti·∫øt */}
          <div className="summary-card stats-card">
            <h3><i className="fa-solid fa-chart-line" title="Th·ªëng k√™ chi ti·∫øt" ></i> Th·ªëng k√™ chi ti·∫øt</h3>
            <div className="stat-item positive">
              <div>
                <h4>T√≠ch c·ª±c</h4>
                <p>Kh√°ch h√†ng h√†i l√≤ng</p>
              </div>
              <span>{stats.percent.positive}%</span>
            </div>
            <div className="stat-item neutral">
              <div>
                <h4>Trung l·∫≠p</h4>
                <p>Kh√¥ng c√≥ √Ω ki·∫øn r√µ r√†ng</p>
              </div>
              <span>{stats.percent.neutral}%</span>
            </div>
            <div className="stat-item negative">
              <div>
                <h4>Ti√™u c·ª±c</h4>
                <p>C·∫ßn c·∫£i thi·ªán</p>
              </div>
              <span>{stats.percent.negative}%</span>
            </div>

            <div className="ai-insight">
              <strong>ü§ñ Nh·∫≠n x√©t AI</strong>
              <p>
                T·ª∑ l·ªá h√†i l√≤ng cao (<b>{stats.percent.positive}%</b>) cho th·∫•y d·ªãch v·ª• ƒëang ƒëi ƒë√∫ng h∆∞·ªõng. Tuy nhi√™n,{" "}
                <b>{stats.percent.negative}%</b> ph·∫£n h·ªìi ti√™u c·ª±c c·∫ßn ƒë∆∞·ª£c ∆∞u ti√™n x·ª≠ l√Ω ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám.
              </p>
            </div>
          </div>
        </div>

        <section className="ai-analysis">
          <h2>ü§ñ Ph√¢n t√≠ch AI</h2>

          <div className="ai-content">
            <h3>üß† T√≥m t·∫Øt √Ω ch√≠nh</h3>
            <p className="ai-sum">
              <span className="highlight">ch·ªù ƒë·ª£i l√¢u</span> v√†{" "}
              <span className="highlight">gi√° c·∫£ h∆°i cao</span>. Kh√°ch h√†ng mong mu·ªën{" "}
              <span className="highlight">c·∫£i thi·ªán ·ª©ng d·ª•ng mobile</span> v√†{" "}
              <span className="highlight">h·ªó tr·ª£ k·ªπ thu·∫≠t</span>.
            </p>
          </div>


        </section>

        {/* Chi ti·∫øt ph·∫£n h·ªìi */}
        <div className="feedback-section">
          <div className="feedback-header">
            <h3><i className="fa-regular fa-comment" title="Chi ti·∫øt ph·∫£n h·ªìi theo c·∫£m x√∫c"></i> Chi ti·∫øt ph·∫£n h·ªìi theo c·∫£m x√∫c</h3>
            <div className="feedback-filters">
              <button className="active">T·∫•t c·∫£ ({stats.total})</button>
              <button className="positive">T√≠ch c·ª±c ({stats.positive})</button>
              <button className="neutral">Trung l·∫≠p ({stats.neutral})</button>
              <button className="negative">Ti√™u c·ª±c ({stats.negative})</button>
            </div>
          </div>

          <div className="feedback-list">
            {feedbacks.map((fb) => (
              <div key={fb.id} className={`feedback-card ${fb.sentiment.toLowerCase()}`}>
                <span className="tag">{fb.sentiment}</span>
                <p>{fb.text}</p>
                <span className="index">#{fb.id}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default SentimentPage;
