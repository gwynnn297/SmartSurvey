import React, { useMemo, useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import MainLayout from '../../layouts/MainLayout';
import { dashboardReportService } from '../../services/dashboardReportService';

import './DashboardReportPage.css';

const MetricCard = ({ bgClass, icon, title, value }) => (
    <div className={`report-card ${bgClass}`}>
        <div className="report-card__icon" aria-hidden="true">{icon}</div>
        <div className="report-card__content">
            <p className="report-card__title">{title}</p>
            <div className="report-card__value">{value}</div>
        </div>
    </div>
);

const RecentItem = ({ color, text, time }) => (
    <div className="recent-item">
        <span className={`recent-dot ${color}`} aria-hidden="true" />
        <span className="recent-text">{text}</span>
        <span className="recent-time">{time}</span>
    </div>
);

const ProgressItem = ({ label, valueLabel, percent, colorClass, showPlus = false }) => (
    <div className="progress-item">
        <div className="progress-item__head">
            <span>{label}</span>
            <span className="progress-item__value">{valueLabel}</span>
        </div>
        <div className="progress">
            <div className={`progress__bar ${colorClass}`} style={{ width: `${Math.min(Math.max(percent, 0), 100)}%` }} />
        </div>
        {showPlus && <div className="progress-item__note">+{percent}</div>}
    </div>
);

export default function DashboardReportPage() {
    const navigate = useNavigate();
    const location = useLocation();

    // L·∫•y d·ªØ li·ªáu survey t·ª´ state
    const surveyData = location.state || {};
    const {
        surveyId,
        surveyTitle = 'Kh·∫£o s√°t kh√¥ng c√≥ ti√™u ƒë·ªÅ',
        surveyDescription = '',
        questions = [],
        questionsCount = 0,
        isFromCreateSurvey = false
    } = surveyData;

    // State cho d·ªØ li·ªáu th·ªëng k√™ dashboard
    const [dashboardStats, setDashboardStats] = useState({
        totalResponses: 0,
        totalViews: 0,
        completionRate: 0,
        averageTime: '0m',
        loading: true,
        error: null,
        isRealData: false,
        fallbackReason: null
    });

    // State cho danh s√°ch ph·∫£n h·ªìi g·∫ßn ƒë√¢y
    const [recentResponses, setRecentResponses] = useState({
        hourlyData: [], // D·ªØ li·ªáu theo gi·ªù t·ª´ timeline API
        loading: true,
        error: null
    });

    // State cho th·ªëng k√™ s·ªë c√¢u h·ªèi theo lo·∫°i
    const [questionCounts, setQuestionCounts] = useState({
        data: null,
        loading: true,
        error: null
    });

    // T√≠nh to√°n th·ªëng k√™ t·ª´ d·ªØ li·ªáu questions
    const surveyStats = useMemo(() => {
        const stats = {
            totalQuestions: questionsCount,
            requiredQuestions: questions.filter(q => q.is_required).length,
            multipleChoice: questions.filter(q => q.question_type === 'multiple_choice').length,
            singleChoice: questions.filter(q => q.question_type === 'single_choice').length,
            openEnded: questions.filter(q => q.question_type === 'open_ended').length,
            boolean: questions.filter(q => q.question_type === 'boolean_' || q.question_type === 'yes_no').length,
            ranking: questions.filter(q => q.question_type === 'ranking').length,
            rating: questions.filter(q => q.question_type === 'rating').length,
            dateTime: questions.filter(q => q.question_type === 'date_time').length,
            fileUpload: questions.filter(q => q.question_type === 'file_upload').length
        };
        return stats;
    }, [questions, questionsCount]);

    // Effect ƒë·ªÉ l·∫•y d·ªØ li·ªáu th·ªëng k√™ t·ª´ API
    useEffect(() => {
        const fetchDashboardStats = async () => {
            if (!surveyId) {
                // N·∫øu kh√¥ng c√≥ surveyId, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh l√† 0
                setDashboardStats(prev => ({
                    ...prev,
                    totalResponses: 0,
                    totalViews: 0,
                    completionRate: 0,
                    averageTime: '0m',
                    loading: false,
                    isRealData: false,
                    fallbackReason: 'No surveyId provided'
                }));

                setRecentResponses(prev => ({
                    ...prev,
                    hourlyData: [],
                    loading: false,
                    error: null
                }));
                return;
            }

            try {
                setDashboardStats(prev => ({ ...prev, loading: true, error: null }));
                setRecentResponses(prev => ({ ...prev, loading: true, error: null }));

                // G·ªçi API t·ªïng h·ª£p t·ª´ StatisticsController v·ªõi fallback mechanism
                const dashboardData = await dashboardReportService.getDashboardData(surveyId);

                const { overview: overviewData, timeline: timelineData, questionCounts: questionCountsData, isRealData, fallbackReason } = dashboardData;

                // Log data source information
                if (isRealData) {
                    console.log('‚úÖ Using real data from StatisticsController APIs');
                } else {
                    console.log('üìä API returned fallback/mock data:', fallbackReason);
                }

                // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c (API l·ªói ho·∫∑c fallback), hi·ªÉn th·ªã 0
                if (!isRealData) {
                    setDashboardStats(prev => ({
                        ...prev,
                        totalResponses: 0,
                        totalViews: 0,
                        completionRate: 0,
                        averageTime: '0m',
                        loading: false,
                        error: 'Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªëng k√™',
                        isRealData: false,
                        fallbackReason
                    }));

                    setRecentResponses(prev => ({
                        ...prev,
                        data: [],
                        loading: false,
                        error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph·∫£n h·ªìi'
                    }));
                    return;
                }

                // Map d·ªØ li·ªáu t·ª´ SurveyOverviewResponseDTO (ch·ªâ khi c√≥ d·ªØ li·ªáu th·ª±c)
                const totalResponses = overviewData.totalResponses || 0;
                const totalViews = overviewData.viewership || 0;
                const completionRate = overviewData.completionRate || 0;
                const averageTime = overviewData.avgCompletionTime || '0m';

                setDashboardStats(prev => ({
                    ...prev,
                    totalResponses,
                    totalViews,
                    completionRate,
                    averageTime,
                    loading: false,
                    error: null,
                    isRealData,
                    fallbackReason
                }));

                // Map hourly data t·ª´ timeline ƒë·ªÉ t·∫°o danh s√°ch ph·∫£n h·ªìi g·∫ßn ƒë√¢y
                const hourlyData = timelineData.hourly ? timelineData.hourly : [];

                setRecentResponses(prev => ({
                    ...prev,
                    hourlyData: hourlyData,
                    loading: false,
                    error: null
                }));

                // L∆∞u d·ªØ li·ªáu question counts t·ª´ API
                setQuestionCounts(prev => ({
                    ...prev,
                    data: questionCountsData,
                    loading: false,
                    error: null
                }));

            } catch (error) {
                console.error('L·ªói khi l·∫•y d·ªØ li·ªáu th·ªëng k√™:', error);

                // Fallback v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh khi c√≥ l·ªói (t·∫•t c·∫£ l√† 0)
                setDashboardStats(prev => ({
                    ...prev,
                    totalResponses: 0,
                    totalViews: 0,
                    completionRate: 0,
                    averageTime: '0m',
                    loading: false,
                    error: 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªëng k√™',
                    isRealData: false,
                    fallbackReason: 'API error - using fallback data'
                }));

                setRecentResponses(prev => ({
                    ...prev,
                    hourlyData: [],
                    loading: false,
                    error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph·∫£n h·ªìi'
                }));

                setQuestionCounts(prev => ({
                    ...prev,
                    data: null,
                    loading: false,
                    error: 'Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ c√¢u h·ªèi'
                }));
            }
        };

        fetchDashboardStats();
    }, [surveyId, isFromCreateSurvey, questionsCount]);

    // Helper function ƒë·ªÉ format th·ªùi gian "X ph√∫t tr∆∞·ªõc" t·ª´ hourly data
    // Hourly data l√† 24 gi·ªù g·∫ßn nh·∫•t (t·ª´ h√¥m qua ƒë·∫øn h√¥m nay)
    const formatTimeAgoFromHourly = (hour, currentDate = new Date()) => {
        if (!hour) return 'Kh√¥ng x√°c ƒë·ªãnh';

        try {
            // Parse hour format "HH:mm"
            const [hours, minutes] = hour.split(':').map(Number);
            const now = new Date(currentDate);
            const nowHours = now.getHours();
            const nowMinutes = now.getMinutes();

            // X√°c ƒë·ªãnh date: hourly data l√† 24 gi·ªù g·∫ßn nh·∫•t
            // N·∫øu hour > gi·ªù hi·ªán t·∫°i => l√† h√¥m qua (v√¨ ƒë√£ qua 24 gi·ªù)
            // N·∫øu hour <= gi·ªù hi·ªán t·∫°i => l√† h√¥m nay
            const targetDate = new Date(now);

            if (hours > nowHours || (hours === nowHours && minutes > nowMinutes)) {
                // Hour n√†y l√† t·ª´ h√¥m qua
                targetDate.setDate(targetDate.getDate() - 1);
            }

            targetDate.setHours(hours, minutes, 0, 0);

            // T√≠nh kho·∫£ng th·ªùi gian t·ª´ targetDate ƒë·∫øn hi·ªán t·∫°i
            const diffInMs = now - targetDate;
            const diffInMinutes = Math.floor(diffInMs / (1000 * 60));

            if (diffInMinutes < 1) {
                return 'V·ª´a xong';
            } else if (diffInMinutes < 60) {
                return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
            } else if (diffInMinutes < 60 * 24) {
                return `${Math.floor(diffInMinutes / 60)} gi·ªù tr∆∞·ªõc`;
            } else {
                return `${Math.floor(diffInMinutes / (60 * 24))} ng√†y tr∆∞·ªõc`;
            }
        } catch (error) {
            return 'Kh√¥ng x√°c ƒë·ªãnh';
        }
    };

    const recentActivities = useMemo(() => {
        // N·∫øu ƒëang loading, hi·ªÉn th·ªã th√¥ng b√°o loading
        if (recentResponses.loading) {
            return [
                { color: 'blue', text: 'ƒêang t·∫£i danh s√°ch ph·∫£n h·ªìi...', time: '' }
            ];
        }

        // N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        if (recentResponses.error) {
            return [
                { color: 'red', text: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph·∫£n h·ªìi', time: '' }
            ];
        }

        // N·∫øu c√≥ hourlyData v√† c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã danh s√°ch ph·∫£n h·ªìi th·ª±c t·∫ø
        if (recentResponses.hourlyData && recentResponses.hourlyData.length > 0) {
            // T·∫°o danh s√°ch t·ª´ hourly data: m·ªói response l√† m·ªôt "Ph·∫£n h·ªìi m·ªõi t·ª´ Ng∆∞·ªùi tham gia XXX"
            const colors = ['green', 'blue', 'purple', 'orange', 'red', 'teal', 'yellow'];
            const activities = [];

            // B·∫Øt ƒë·∫ßu counter t·ª´ 0 v√† tƒÉng d·∫ßn (0, 1, 2, 3...)
            let participantCounter = 1;

            // L·∫•y hourly data v√† s·∫Øp x·∫øp theo gi·ªù (m·ªõi nh·∫•t tr∆∞·ªõc)
            // Hourly data t·ª´ backend ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo gi·ªù tƒÉng d·∫ßn, c·∫ßn reverse ƒë·ªÉ c√≥ m·ªõi nh·∫•t tr∆∞·ªõc
            const sortedHourlyData = [...recentResponses.hourlyData].reverse();

            // T·∫°o danh s√°ch items t·ª´ hourly data
            sortedHourlyData.forEach((hourData) => {
                const count = hourData.count || 0;
                const hour = hourData.hour || '';

                if (!hour || count === 0) return;

                // T·∫°o count items cho m·ªói hour (m·ªói item l√† m·ªôt "Ph·∫£n h·ªìi m·ªõi t·ª´ Ng∆∞·ªùi tham gia XXX")
                for (let i = 0; i < count; i++) {
                    const colorIndex = activities.length % colors.length;
                    activities.push({
                        color: colors[colorIndex],
                        text: `Ph·∫£n h·ªìi m·ªõi t·ª´ Ng∆∞·ªùi tham gia ${participantCounter}`,
                        time: formatTimeAgoFromHourly(hour)
                    });
                    participantCounter++;
                }
            });

            // Tr·∫£ v·ªÅ t·∫•t c·∫£ activities (s·∫Ω c√≥ thanh cu·ªôn n·∫øu nhi·ªÅu h∆°n 10 items)
            return activities;
        }

        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu v√† ƒëang ·ªü ch·∫ø ƒë·ªô t·∫°o survey m·ªõi, hi·ªÉn th·ªã th√¥ng b√°o t·∫°o survey
        if (isFromCreateSurvey && (!surveyId || !recentResponses.hourlyData || recentResponses.hourlyData.length === 0)) {
            return [
                { color: 'green', text: `Kh·∫£o s√°t "${surveyTitle}" ƒë√£ ƒë∆∞·ª£c t·∫°o`, time: 'V·ª´a xong' },
                { color: 'blue', text: `T·ªïng ${questionsCount} c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p`, time: 'V·ª´a xong' },
                { color: 'purple', text: 'Ch·ªù xu·∫•t b·∫£n ƒë·ªÉ thu th·∫≠p ph·∫£n h·ªìi', time: 'V·ª´a xong' }
            ];
        }

        // M·∫∑c ƒë·ªãnh: kh√¥ng c√≥ ph·∫£n h·ªìi n√†o
        return [
            { color: 'gray', text: 'Ch∆∞a c√≥ ph·∫£n h·ªìi n√†o', time: '' }
        ];
    }, [isFromCreateSurvey, surveyTitle, questionsCount, recentResponses, surveyId]);

    // Helper function ƒë·ªÉ map lo·∫°i c√¢u h·ªèi sang ti·∫øng Vi·ªát
    const getQuestionTypeLabel = (type) => {
        const typeMap = {
            'multiple_choice': 'Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn',
            'single_choice': 'Tr·∫Øc nghi·ªám m·ªôt l·ª±a ch·ªçn',
            'open_ended': 'C√¢u h·ªèi m·ªü',
            'rating': 'ƒê√°nh gi√° sao',
            'boolean_': 'ƒê√∫ng/Sai',
            'ranking': 'X·∫øp h·∫°ng',
            'file_upload': 'T·∫£i file',
            'date_time': 'Ng√†y/Gi·ªù'
        };
        return typeMap[type] || type;
    };

    // Helper function ƒë·ªÉ l·∫•y m√†u cho t·ª´ng lo·∫°i c√¢u h·ªèi
    const getQuestionTypeColor = (type) => {
        const colorMap = {
            'multiple_choice': 'indigo',
            'single_choice': 'purple',
            'open_ended': 'green',
            'rating': 'yellow',
            'boolean_': 'blue',
            'ranking': 'orange',
            'file_upload': 'red',
            'date_time': 'teal'
        };
        return colorMap[type] || 'indigo';
    };

    // Helper function ƒë·ªÉ render t·∫•t c·∫£ c√°c lo·∫°i c√¢u h·ªèi
    const renderQuestionStats = (byType = {}, totalQuestions = 0) => {
        const allQuestionTypes = [
            'multiple_choice',
            'single_choice',
            'open_ended',
            'rating',
            'boolean_',
            'ranking',
            'file_upload',
            'date_time'
        ];

        return allQuestionTypes.map((type) => {
            const count = byType[type] || 0;
            const percent = totalQuestions > 0 ? (count / totalQuestions) * 100 : 0;

            return (
                <ProgressItem
                    key={type}
                    label={getQuestionTypeLabel(type)}
                    valueLabel={`${count} c√¢u`}
                    percent={percent}
                    colorClass={getQuestionTypeColor(type)}
                />
            );
        });
    };

    const handleExport = () => {
        navigate('/report/export', {
            state: surveyId ? { surveyId, surveyTitle, surveyDescription } : undefined
        });
    };

    return (
        <MainLayout>
            <div className="report-container">
                <header className="report-header">
                    <div className="report-header__top">
                        <div className="report-header__titles">
                            <h1>
                                {isFromCreateSurvey ? `${surveyTitle}` : 'T·ªïng quan kh·∫£o s√°t'}
                            </h1>
                            <p>
                                {isFromCreateSurvey && surveyDescription
                                    ? surveyDescription
                                    : 'Th·ªëng k√™ t·ªïng th·ªÉ v·ªÅ ph·∫£n h·ªìi v√† k·∫øt qu·∫£ kh·∫£o s√°t c·ªßa b·∫°n'
                                }
                            </p>
                            {/* {isFromCreateSurvey && (
                                <div style={{ marginTop: '8px', padding: '8px 12px', background: '#f0f9ff', border: '1px solid #0ea5e9', borderRadius: '6px', fontSize: '14px', color: '#0369a1' }}>
                                    <strong>Survey ID:</strong> {surveyId}
                                </div>
                            )} */}
                        </div>
                        <button className="export-btn" onClick={handleExport}>
                            <span className="btn-icon" aria-hidden="true">üßæ</span>
                            Xu·∫•t b√°o c√°o
                        </button>
                    </div>
                </header>

                {/* Data Source Notice
                {surveyId && !dashboardStats.error && !dashboardStats.loading && (
                    <div style={{
                        margin: '16px 0',
                        padding: '12px 16px',
                        background: dashboardStats.isRealData ? '#f0fdf4' : '#fffbeb',
                        border: dashboardStats.isRealData ? '1px solid #16a34a' : '1px solid #f59e0b',
                        borderRadius: '8px',
                        color: dashboardStats.isRealData ? '#166534' : '#92400e',
                        fontSize: '14px'
                    }}>
                        {dashboardStats.isRealData ? (
                            <>
                                <strong>‚úÖ ƒê√£ k·∫øt n·ªëi:</strong> ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·ª´ StatisticsController backend APIs
                            </>
                        ) : (
                            <>
                                <strong>‚ö†Ô∏è Ch·∫ø ƒë·ªô fallback:</strong> StatisticsController APIs tr·∫£ v·ªÅ l·ªói 401 (Unauthorized).
                                ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u. C·∫ßn c·∫•u h√¨nh authentication cho StatisticsController ·ªü backend.
                                <br />
                                <small>L√Ω do: {dashboardStats.fallbackReason}</small>
                            </>
                        )}
                    </div>
                )} */}

                {dashboardStats.error && (
                    <div style={{
                        margin: '16px 0',
                        padding: '12px 16px',
                        background: '#fef2f2',
                        border: '1px solid #fecaca',
                        borderRadius: '8px',
                        color: '#dc2626',
                        fontSize: '14px'
                    }}>
                        <strong>‚ö†Ô∏è L·ªói:</strong> {dashboardStats.error}
                    </div>
                )}

                <section className="report-metrics" aria-label="Ch·ªâ s·ªë ch√≠nh">
                    <MetricCard
                        bgClass="pink"
                        title="T·ªïng ph·∫£n h·ªìi"
                        value={dashboardStats.loading ? "..." : dashboardStats.totalResponses.toString()}
                        icon={(
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <rect x="3" y="3" width="18" height="18" rx="2" stroke="currentColor" strokeWidth="1.5" />
                                <rect x="7" y="12" width="2.5" height="5" fill="currentColor" />
                                <rect x="11" y="9" width="2.5" height="8" fill="currentColor" />
                                <rect x="15" y="6" width="2.5" height="11" fill="currentColor" />
                            </svg>
                        )}
                    />
                    <MetricCard
                        bgClass="yellow"
                        title="S·ªë l∆∞·ª£t xem"
                        value={dashboardStats.loading ? "..." : dashboardStats.totalViews.toString()}
                        icon={(
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" strokeWidth="1.5">
                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z" strokeLinecap="round" strokeLinejoin="round" />
                                <circle cx="12" cy="12" r="3" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                        )}
                    />
                    <MetricCard
                        bgClass="peach"
                        title="Ho√†n th√†nh"
                        value={dashboardStats.loading ? "..." : `${Math.round(dashboardStats.completionRate)}%`}
                        icon={(
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="9" stroke="currentColor" strokeWidth="1.5" />
                                <path d="M8 12l2.5 2.5L16 9" stroke="currentColor" strokeWidth="1.8" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                        )}
                    />
                    <MetricCard
                        bgClass="pink"
                        title="Th·ªùi gian TB"
                        value={dashboardStats.loading ? "..." : dashboardStats.averageTime}
                        icon={(
                            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="12" cy="12" r="9" stroke="currentColor" strokeWidth="1.5" />
                                <path d="M12 7v5l3 2" stroke="currentColor" strokeWidth="1.8" strokeLinecap="round" strokeLinejoin="round" />
                            </svg>
                        )}
                    />

                </section>

                <section className="report-panels">
                    <div className="panel left">
                        <h3>Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y</h3>
                        {/* 
                        üìä VIEW TRACKING SYSTEM:
                        - S·ªë l∆∞·ª£t xem t·ª± ƒë·ªông tƒÉng khi ng∆∞·ªùi d√πng truy c·∫≠p /response/{surveyId}
                        - PublicResponsePage.jsx g·ªçi incrementViewCount() qua /surveys/{id}/public endpoint  
                        - Backend SurveyController.getSurveyPublic() t·ª± ƒë·ªông track view v·ªõi IP + User Agent
                        - StatisticsController.getSurveyOverview() tr·∫£ v·ªÅ viewership count m·ªõi nh·∫•t
                        - S·ª≠ d·ª•ng "+1 View" button ƒë·ªÉ test ho·∫∑c "Refresh" ƒë·ªÉ c·∫≠p nh·∫≠t
                        */}
                        <div className="recent-list">
                            {recentActivities.map((item, idx) => (
                                <RecentItem key={idx} {...item} />
                            ))}
                        </div>
                    </div>

                    <div className="panel right">
                        <h3>Th·ªëng k√™ nhanh</h3>
                        <div className="quick-stats">
                            {questionCounts.loading ? (
                                <div style={{ padding: '20px', textAlign: 'center', color: '#666' }}>
                                    ƒêang t·∫£i th·ªëng k√™...
                                </div>
                            ) : (
                                <>
                                    {/* Lu√¥n hi·ªÉn th·ªã t·∫•t c·∫£ c√°c lo·∫°i c√¢u h·ªèi */}
                                    {/* N·∫øu c√≥ d·ªØ li·ªáu t·ª´ API th√¨ d√πng, n·∫øu kh√¥ng th√¨ hi·ªÉn th·ªã 0 cho t·∫•t c·∫£ */}
                                    {questionCounts.data && questionCounts.data.byType ? (
                                        renderQuestionStats(
                                            questionCounts.data.byType,
                                            questionCounts.data.total || 0
                                        )
                                    ) : isFromCreateSurvey && surveyStats.totalQuestions > 0 ? (
                                        // Fallback cho ch·∫ø ƒë·ªô t·∫°o survey m·ªõi v·ªõi d·ªØ li·ªáu t·ª´ surveyStats
                                        renderQuestionStats({
                                            'multiple_choice': surveyStats.multipleChoice || 0,
                                            'single_choice': surveyStats.singleChoice || 0,
                                            'open_ended': surveyStats.openEnded || 0,
                                            'rating': surveyStats.rating || 0,
                                            'boolean_': surveyStats.boolean || 0,
                                            'ranking': surveyStats.ranking || 0,
                                            'file_upload': surveyStats.fileUpload || 0,
                                            'date_time': surveyStats.dateTime || 0
                                        }, surveyStats.totalQuestions)
                                    ) : (
                                        // Kh√¥ng c√≥ d·ªØ li·ªáu: hi·ªÉn th·ªã t·∫•t c·∫£ v·ªõi gi√° tr·ªã 0
                                        renderQuestionStats({}, 0)
                                    )}
                                </>
                            )}
                        </div>
                    </div>
                </section>

                <section className="report-actions">
                    {/* {isFromCreateSurvey && (
                        <button className="btn orange" onClick={() => navigate('/create-survey', {
                            state: { editSurvey: { id: surveyId, title: surveyTitle, description: surveyDescription } }
                        })}>
                            <span className="btn-icon" aria-hidden="true">‚úèÔ∏è</span>
                            Quay l·∫°i ch·ªânh s·ª≠a
                        </button>
                    )} */}
                    <button className="btn blue" onClick={() => navigate('/report/details-statistic', {
                        state: surveyId ? { surveyId, surveyTitle, surveyDescription } : undefined
                    })}>
                        <span className="btn-icon" aria-hidden="true">üìä</span>
                        Xem th·ªëng k√™ chi ti·∫øt
                    </button>
                    <button className="btn green" onClick={() => navigate('/report/individual-responses', {
                        state: surveyId ? { surveyId, surveyTitle, surveyDescription } : undefined
                    })}>
                        <span className="btn-icon" aria-hidden="true">üß†</span>
                        Danh s√°ch ph·∫£n h·ªìi
                    </button>
                    <button className="btn teal" onClick={() => navigate('/report/sentiment', {
                        state: surveyId ? { surveyId, surveyTitle, surveyDescription } : undefined
                    })}>
                        <span className="btn-icon" aria-hidden="true">üòä</span>
                        Ph√¢n t√≠ch c·∫£m x√∫c
                    </button>

                </section>
            </div>
        </MainLayout>
    );
}