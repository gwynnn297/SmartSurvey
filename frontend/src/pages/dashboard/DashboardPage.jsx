import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import HeaderComponent from "../../components/HeaderComponent";
import { surveyService } from "../../services/surveyService";
import "./DashboardPage.css";

export default function DashboardPage() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [overview, setOverview] = useState({
    totalSurveys: 0,
    totalResponses: 0,
    activeSurveys: 0,
    completionRate: 0
  });
  const [surveys, setSurveys] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);

  // Pagination state
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [totalElements, setTotalElements] = useState(0);
  const [pageSize] = useState(10);

  useEffect(() => {
    const loadData = async () => {
      try {
        console.log('üè† Dashboard: Starting to load data...');

        // L·∫•y user t·ª´ localStorage
        const storedUser = (() => {
          try {
            return JSON.parse(localStorage.getItem("user")) || null;
          } catch (e) {
            return null;
          }
        })();
        if (storedUser) {
          setUser(storedUser);
          console.log('üë§ Dashboard: User loaded from localStorage:', storedUser);
        }

        // Check token before making API calls
        const token = localStorage.getItem('token');
        console.log('üîë Dashboard: Token check:', token ? 'Found' : 'Not found');

        // Load surveys from localStorage first
        const localSurveys = JSON.parse(localStorage.getItem('userSurveys') || '[]');
        console.log('üìã Dashboard: Local surveys:', localSurveys);

        // Try to get data from API
        let apiOverview = null;
        let apiSurveys = null;

        try {
          console.log('üìä Dashboard: Calling getDashboardOverview...');
          apiOverview = await surveyService.getDashboardOverview();
          console.log('‚úÖ Dashboard: Overview response:', apiOverview);
        } catch (error) {
          console.log('‚ö†Ô∏è Dashboard: API overview failed, using local data');
        }

        try {
          console.log('üìã Dashboard: Calling getSurveys...');
          apiSurveys = await surveyService.getSurveys(currentPage, pageSize);
          console.log('‚úÖ Dashboard: Surveys response:', apiSurveys);
        } catch (error) {
          console.log('‚ö†Ô∏è Dashboard: API surveys failed, using local data');
        }

        // Calculate real statistics from actual data
        const calculateRealStats = (surveysData, metaData = null) => {
          let totalSurveys, totalResponses, activeSurveys, completionRate;

          if (metaData) {
            // Use meta data for accurate total count
            totalSurveys = metaData.total || 0;
            console.log('üìä Dashboard: Using meta data for total surveys:', totalSurveys);
          } else {
            totalSurveys = surveysData.length;
          }

          totalResponses = surveysData.reduce((sum, s) => sum + (s.responses || s.responseCount || 0), 0);
          activeSurveys = surveysData.filter(s => s.status === 'published').length;

          // Calculate completion rate based on surveys with responses
          const surveysWithResponses = surveysData.filter(s => (s.responses || s.responseCount || 0) > 0);
          completionRate = totalSurveys > 0 ? Math.round((surveysWithResponses.length / totalSurveys) * 100) : 0;

          return {
            totalSurveys,
            totalResponses,
            activeSurveys,
            completionRate
          };
        };

        // Use real data from API or local storage
        let finalSurveysData = [];
        let metaData = null;

        if (apiSurveys) {
          if (apiSurveys.meta) {
            metaData = apiSurveys.meta;
            // Try to get all surveys from API for detailed stats
            try {
              const allSurveysResponse = await surveyService.getSurveys(0, 1000);
              finalSurveysData = Array.isArray(allSurveysResponse?.result) ? allSurveysResponse.result : [];
              console.log('üìä Dashboard: Fetched all surveys for detailed stats:', finalSurveysData.length);
            } catch (error) {
              console.log('Could not fetch all surveys, using current page data');
              finalSurveysData = surveysList;
            }
          } else {
            finalSurveysData = surveysList;
          }
        } else {
          finalSurveysData = localSurveys;
        }

        const realStats = calculateRealStats(finalSurveysData, metaData);
        setOverview(realStats);

        console.log('üìä Dashboard: Real statistics calculated:', realStats);

        // Set surveys data (prefer API, fallback to local)
        let surveysList = [];
        if (apiSurveys) {
          // Backend tr·∫£ v·ªÅ { meta: {...}, result: [...] }
          if (apiSurveys.meta) {
            // C√≥ th√¥ng tin ph√¢n trang t·ª´ API
            surveysList = Array.isArray(apiSurveys.result) ? apiSurveys.result : [];
            setTotalPages(apiSurveys.meta.pages || 0);
            setTotalElements(apiSurveys.meta.total || 0);
          } else {
            // Kh√¥ng c√≥ th√¥ng tin ph√¢n trang, x·ª≠ l√Ω nh∆∞ c≈©
            surveysList = Array.isArray(apiSurveys?.result) ? apiSurveys.result :
              Array.isArray(apiSurveys) ? apiSurveys : localSurveys;
            setTotalPages(1);
            setTotalElements(surveysList.length);
          }
        } else {
          // Fallback to local data with pagination
          const startIndex = currentPage * pageSize;
          const endIndex = startIndex + pageSize;
          surveysList = localSurveys.slice(startIndex, endIndex);
          setTotalPages(Math.ceil(localSurveys.length / pageSize));
          setTotalElements(localSurveys.length);
        }

        setSurveys(surveysList);
        console.log('üéâ Dashboard: Data loaded successfully');
      } catch (error) {
        console.error('Dashboard: Error loading data:', error);
        console.error('Dashboard: Error details:', error.response?.data);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [currentPage, pageSize]);


  const displayName = user?.name || user?.username || user?.fullName || "User";

  const handleViewSurvey = (survey) => {
    alert('Ch·ª©c nƒÉng xem kh·∫£o s√°t s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn');
  };

  // Pagination handlers
  const handlePageChange = (newPage) => {
    if (newPage >= 0 && newPage < totalPages) {
      setCurrentPage(newPage);
    }
  };

  const handlePreviousPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const handleNextPage = () => {
    if (currentPage < totalPages - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  // Generate page numbers for pagination
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5;
    let startPage = Math.max(0, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);

    if (endPage - startPage < maxVisiblePages - 1) {
      startPage = Math.max(0, endPage - maxVisiblePages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    return pages;
  };


  if (loading) {
    return (
      <div className="dashboard-container">
        <div className="dashboard-content">
          <div className="loading">ƒêang t·∫£i...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-container">
      <HeaderComponent showUserInfo={true} />
      <div className="dashboard-content">
        <div className="dashboard-header">
          <div className="header-texts">
            <h1>Xin ch√†o, {displayName}</h1>
            <p>Qu·∫£n l√Ω v√† ph√¢n t√≠ch kh·∫£o s√°t m·ªôt c√°ch th√¥ng minh</p>
          </div>
        </div>

        <div className="kpi-grid">
          <div className="kpi-card">
            <div className="kpi-icon kpi-blue">üìã</div>
            <div className="kpi-info">
              <h3>T·ªïng Kh·∫£o s√°t</h3>
              <span className="kpi-number">{overview.totalSurveys}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-green">üó≥Ô∏è</div>
            <div className="kpi-info">
              <h3>T·ªïng Ph·∫£n h·ªìi</h3>
              <span className="kpi-number">{overview.totalResponses}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-orange">‚úÖ</div>
            <div className="kpi-info">
              <h3>ƒêang ho·∫°t ƒë·ªông</h3>
              <span className="kpi-number">{overview.activeSurveys}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-purple">üìà</div>
            <div className="kpi-info">
              <h3>T·ªâ l·ªá ho√†n th√†nh</h3>
              <span className="kpi-number">{overview.completionRate}%</span>
            </div>
          </div>
        </div>

        <div className="section">
          <div className="section-header">
            <h2>Danh s√°ch kh·∫£o s√°t:</h2>
            <div className="dashboard-actions">
              {/* <button className="btn-primary" onClick={() => setShowCreateModal(true)}>+ T·∫°o kh·∫£o s√°t m·ªõi</button> */}
              <button className="btn-createsurvey" onClick={() => setShowCreateModal(true)}>+ T·∫°o kh·∫£o s√°t m·ªõi</button>
            </div>
          </div>
          <div className="survey-list">
            {surveys.length === 0 && (
              <div className="empty">Ch∆∞a c√≥ kh·∫£o s√°t n√†o.</div>
            )}
            {surveys.map((s) => (
              <div
                className="survey-item"
                key={s.id || s._id}
                onClick={() => navigate('/create-survey', { state: { editSurvey: s } })}
                style={{ cursor: 'pointer' }}
              >
                <div className="survey-left">
                  <div className={`status-badge ${s.status || 'draft'}`}>
                    {s.status === 'published' ? 'ƒê√£ xu·∫•t b·∫£n' : s.status === 'archived' ? 'ƒê√£ l∆∞u tr·ªØ' : 'B·∫£n nh√°p'}
                  </div>
                  <div className="survey-title">{s.title || 'Kh√¥ng ti√™u ƒë·ªÅ'}</div>
                  {s.description && (
                    <div className="survey-description">{s.description}</div>
                  )}
                  <div className="survey-meta">
                    <span>üìÖ {new Date(s.createdAt || s.created_at || Date.now()).toLocaleDateString('vi-VN')}</span>
                    <span>‚Ä¢</span>
                    <span>üí¨ {s.responses ?? s.responseCount ?? 0} ph·∫£n h·ªìi</span>
                    {s.questionsCount && (
                      <>
                        <span>‚Ä¢</span>
                        <span>‚ùì {s.questionsCount} c√¢u h·ªèi</span>
                      </>
                    )}
                  </div>
                </div>
                <div className="survey-right">

                  <button
                    className="btn-text"
                    onClick={(e) => {
                      e.stopPropagation();
                      alert('Ch·ª©c nƒÉng b√°o c√°o s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn');
                    }}
                  >
                    üìä B√°o c√°o
                  </button>
                  <button
                    className="btn-text"
                    onClick={async (e) => {
                      e.stopPropagation();
                      if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh·∫£o s√°t n√†y kh√¥ng? T·∫•t c·∫£ c√¢u h·ªèi v√† t√πy ch·ªçn trong kh·∫£o s√°t c≈©ng s·∫Ω b·ªã x√≥a.')) {
                        try {
                          // G·ªçi API x√≥a tr√™n backend (backend s·∫Ω t·ª± ƒë·ªông x√≥a cascade)
                          await surveyService.deleteSurvey(s.id);

                          // X√≥a trong localStorage v√† state ƒë·ªÉ c·∫≠p nh·∫≠t UI
                          const updatedSurveys = surveys.filter(survey => survey.id !== s.id);
                          localStorage.setItem('userSurveys', JSON.stringify(updatedSurveys));
                          setSurveys(updatedSurveys);

                          // X√≥a t·∫•t c·∫£ c√¢u h·ªèi v√† t√πy ch·ªçn li√™n quan trong localStorage
                          const surveyId = s.id;

                          // L·∫•y danh s√°ch c√¢u h·ªèi t·ª´ localStorage
                          const allQuestions = JSON.parse(localStorage.getItem('surveyQuestions') || '[]');
                          const questionsToDelete = allQuestions.filter(q => q.surveyId === surveyId);

                          // L·∫•y danh s√°ch t√πy ch·ªçn t·ª´ localStorage
                          const allOptions = JSON.parse(localStorage.getItem('questionOptions') || '[]');
                          const questionIdsToDelete = questionsToDelete.map(q => q.id);
                          const optionsToDelete = allOptions.filter(opt => questionIdsToDelete.includes(opt.questionId));

                          // X√≥a c√¢u h·ªèi v√† t√πy ch·ªçn kh·ªèi localStorage
                          const updatedQuestions = allQuestions.filter(q => q.surveyId !== surveyId);
                          const updatedOptions = allOptions.filter(opt => !questionIdsToDelete.includes(opt.questionId));

                          localStorage.setItem('surveyQuestions', JSON.stringify(updatedQuestions));
                          localStorage.setItem('questionOptions', JSON.stringify(updatedOptions));

                          console.log(`üóëÔ∏è ƒê√£ x√≥a ${questionsToDelete.length} c√¢u h·ªèi v√† ${optionsToDelete.length} t√πy ch·ªçn li√™n quan ƒë·∫øn kh·∫£o s√°t ${surveyId}`);

                          // C·∫≠p nh·∫≠t KPI real-time
                          const calculateRealStats = (surveysData, metaData = null) => {
                            let totalSurveys, totalResponses, activeSurveys, completionRate;

                            if (metaData) {
                              totalSurveys = metaData.total || 0;
                            } else {
                              totalSurveys = surveysData.length;
                            }

                            totalResponses = surveysData.reduce((sum, s) => sum + (s.responses || s.responseCount || 0), 0);
                            activeSurveys = surveysData.filter(s => s.status === 'published').length;
                            const surveysWithResponses = surveysData.filter(s => (s.responses || s.responseCount || 0) > 0);
                            completionRate = totalSurveys > 0 ? Math.round((surveysWithResponses.length / totalSurveys) * 100) : 0;

                            return { totalSurveys, totalResponses, activeSurveys, completionRate };
                          };

                          const newStats = calculateRealStats(updatedSurveys);
                          setOverview(newStats);

                          // Reset v·ªÅ trang ƒë·∫ßu n·∫øu trang hi·ªán t·∫°i tr·ªëng
                          if (updatedSurveys.length === 0 && currentPage > 0) {
                            setCurrentPage(0);
                          }

                          alert(`ƒê√£ x√≥a kh·∫£o s√°t th√†nh c√¥ng!\nƒê√£ x√≥a ${questionsToDelete.length} c√¢u h·ªèi v√† ${optionsToDelete.length} t√πy ch·ªçn li√™n quan.`);
                        } catch (error) {
                          console.error('L·ªói khi x√≥a kh·∫£o s√°t:', error);
                          alert('X√≥a kh·∫£o s√°t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
                        }
                      }
                    }}
                  >
                    üóëÔ∏è X√≥a
                  </button>

                </div>
              </div>
            ))}
          </div>

          {/* Pagination */}
          {totalPages > 0 && (
            <div className="pagination-container">
              <div className="pagination">
                <button
                  className="pagination-btn"
                  onClick={handlePreviousPage}
                  disabled={currentPage === 0}
                >
                  ‚Üê Tr∆∞·ªõc
                </button>

                {getPageNumbers().map((pageNum) => (
                  <button
                    key={pageNum}
                    className={`pagination-btn ${currentPage === pageNum ? 'active' : ''}`}
                    onClick={() => handlePageChange(pageNum)}
                  >
                    {pageNum + 1}
                  </button>
                ))}

                <button
                  className="pagination-btn"
                  onClick={handleNextPage}
                  disabled={currentPage === totalPages - 1}
                >
                  Sau ‚Üí
                </button>
              </div>
            </div>
          )}
        </div>
        {showCreateModal && (
          <div className="modal-overlay" onClick={() => setShowCreateModal(false)}>
            <div className="modal" onClick={(e) => e.stopPropagation()}>
              {/* === N√öT X ƒê√É ƒê∆Ø·ª¢C TH√äM V√ÄO ƒê√ÇY === */}
              <button className="modal-close-btn" onClick={() => setShowCreateModal(false)}>&times;</button>
              <div className="modal-header">
                <h3>B·∫°n mu·ªën b·∫Øt ƒë·∫ßu nh∆∞ th·∫ø n√†o?</h3>
                <p>Ch·ªçn ph∆∞∆°ng th·ª©c t·∫°o kh·∫£o s√°t ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>
              </div>
              <div className="modal-body">
                <div className="create-option" onClick={() => { setShowCreateModal(false); navigate('/create-ai'); }}>
                  <div className="option-icon ai">‚ö°</div>
                  <div className="option-title">T·∫°o b·∫±ng AI</div>
                  <ul>
                    <li>Ti·∫øt ki·ªám th·ªùi gian</li>
                    <li>G·ª£i √Ω c√¢u h·ªèi th√¥ng minh</li>
                    <li>T·ªëi ∆∞u m·ª•c ti√™u</li>
                  </ul>
                  <button className="btn-primary small">B·∫Øt ƒë·∫ßu ngay</button>
                </div>
                <div className="create-option" onClick={() => { setShowCreateModal(false); navigate('/create-survey'); }}>
                  <div className="option-icon manual">‚úçÔ∏è</div>
                  <div className="option-title">T·∫°o th·ªß c√¥ng</div>
                  <ul>
                    <li>Ki·ªÉm so√°t ho√†n to√†n</li>
                    <li>T√πy ch·ªânh chi ti·∫øt</li>
                    <li>Thi·∫øt k·∫ø theo √Ω mu·ªën</li>
                  </ul>
                  <button className="btn-primary outlined small">B·∫Øt ƒë·∫ßu ngay</button>
                </div>
              </div>
              <div className="modal-footer">
                <p className="note">L∆∞u √Ω: B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a v√† t√πy ch·ªânh kh·∫£o s√°t sau khi t·∫°o b·∫±ng c·∫£ hai ph∆∞∆°ng th·ª©c.</p>
              </div>
            </div>
          </div>
        )}

      </div>
    </div>
  );
}
