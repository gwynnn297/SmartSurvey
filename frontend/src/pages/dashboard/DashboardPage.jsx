import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import HeaderComponent from "../../components/HeaderComponent";
import { apiService } from "../../services/apiService";
import "./DashboardPage.css";

export default function DashboardPage() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [overview, setOverview] = useState({
    totalSurveys: 0,
    totalResponses: 0,
    activeSurveys: 0,
    completionRate: 0
  });
  const [surveys, setSurveys] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showCreateModal, setShowCreateModal] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      try {
        const storedUser = (() => {
          try {
            return JSON.parse(localStorage.getItem("user")) || null;
          } catch (e) {
            return null;
          }
        })();
        if (storedUser) {
          setUser(storedUser);
        }

        const [overviewRes, surveysRes] = await Promise.all([
          apiService.getDashboardOverview(),
          apiService.getSurveys({ page: 1, limit: 10 })
        ]);

        setOverview({
          totalSurveys: Number(overviewRes?.totalSurveys) || 0,
          totalResponses: Number(overviewRes?.totalResponses) || 0,
          activeSurveys: Number(overviewRes?.activeSurveys) || 0,
          completionRate: Number(overviewRes?.completionRate) || 0
        });
        const list = Array.isArray(surveysRes?.items) ? surveysRes.items : (Array.isArray(surveysRes) ? surveysRes : []);
        setSurveys(list);
      } catch (error) {
        console.error('Error loading dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  const displayName = user?.name || user?.username || user?.email || "User";

  if (loading) {
    return (
      <div className="dashboard-container">
        <div className="dashboard-content">
          <div className="loading">ƒêang t·∫£i...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-container">
      <HeaderComponent showUserInfo={true} />
      <div className="dashboard-content">
        <div className="dashboard-header">
          <div className="header-texts">
            <h1>Xin ch√†o, {displayName}</h1>
            <p>Qu·∫£n l√Ω v√† ph√¢n t√≠ch kh·∫£o s√°t m·ªôt c√°ch th√¥ng minh</p>
          </div>
        </div>

        <div className="kpi-grid">
          <div className="kpi-card">
            <div className="kpi-icon kpi-blue">üìã</div>
            <div className="kpi-info">
              <h3>T·ªïng Kh·∫£o s√°t</h3>
              <span className="kpi-number">{overview.totalSurveys}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-green">üó≥Ô∏è</div>
            <div className="kpi-info">
              <h3>T·ªïng Ph·∫£n h·ªìi</h3>
              <span className="kpi-number">{overview.totalResponses}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-orange">‚úÖ</div>
            <div className="kpi-info">
              <h3>ƒêang ho·∫°t ƒë·ªông</h3>
              <span className="kpi-number">{overview.activeSurveys}</span>
            </div>
          </div>
          <div className="kpi-card">
            <div className="kpi-icon kpi-purple">üìà</div>
            <div className="kpi-info">
              <h3>T·ªâ l·ªá ho√†n th√†nh</h3>
              <span className="kpi-number">{overview.completionRate}%</span>
            </div>
          </div>
        </div>

        <div className="section">
          <div className="section-header">
            <h2>Danh s√°ch kh·∫£o s√°t:</h2>
            <button className="btn-primary" onClick={() => setShowCreateModal(true)}>+ T·∫°o kh·∫£o s√°t m·ªõi</button>
          </div>
          <div className="survey-list">
            {surveys.length === 0 && (
              <div className="empty">Ch∆∞a c√≥ kh·∫£o s√°t n√†o.</div>
            )}
            {surveys.map((s) => (
              <div className="survey-item" key={s.id || s._id}>
                <div className="survey-left">
                  <div className={`status-badge ${s.status || 'draft'}`}>
                    {s.status === 'active' ? 'ƒêang ho·∫°t ƒë·ªông' : s.status === 'closed' ? 'ƒê√£ ƒë√≥ng' : 'Nh√°p'}
                  </div>
                  <div className="survey-title">{s.title || 'Kh√¥ng ti√™u ƒë·ªÅ'}</div>
                  <div className="survey-meta">
                    <span>{new Date(s.createdAt || s.created_at || Date.now()).toLocaleDateString()}</span>
                    <span>‚Ä¢</span>
                    <span>{(s.responses ?? s.responseCount ?? 0)} ph·∫£n h·ªìi</span>
                  </div>
                </div>
                <div className="survey-right">
                  <button className="btn-text">Xem</button>
                  <button className="btn-text">B√°o c√°o</button>
                </div>
              </div>
            ))}
          </div>
        </div>
        {showCreateModal && (
          <div className="modal-overlay" onClick={() => setShowCreateModal(false)}>
            <div className="modal" onClick={(e) => e.stopPropagation()}>
              {/* === N√öT X ƒê√É ƒê∆Ø·ª¢C TH√äM V√ÄO ƒê√ÇY === */}
              <button className="modal-close-btn" onClick={() => setShowCreateModal(false)}>&times;</button>
              <div className="modal-header">
                <h3>B·∫°n mu·ªën b·∫Øt ƒë·∫ßu nh∆∞ th·∫ø n√†o?</h3>
                <p>Ch·ªçn ph∆∞∆°ng th·ª©c t·∫°o kh·∫£o s√°t ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>
              </div>
              <div className="modal-body">
                <div className="create-option" onClick={() => { setShowCreateModal(false); navigate('/create-ai'); }}>
                  <div className="option-icon ai">‚ö°</div>
                  <div className="option-title">T·∫°o b·∫±ng AI</div>
                  <ul>
                    <li>Ti·∫øt ki·ªám th·ªùi gian</li>
                    <li>G·ª£i √Ω c√¢u h·ªèi th√¥ng minh</li>
                    <li>T·ªëi ∆∞u m·ª•c ti√™u</li>
                  </ul>
                  <button className="btn-primary small">B·∫Øt ƒë·∫ßu ngay</button>
                </div>
                <div className="create-option" onClick={() => { setShowCreateModal(false); navigate('/create-survey'); }}>
                  <div className="option-icon manual">‚úçÔ∏è</div>
                  <div className="option-title">T·∫°o th·ªß c√¥ng</div>
                  <ul>
                    <li>Ki·ªÉm so√°t ho√†n to√†n</li>
                    <li>T√πy ch·ªânh chi ti·∫øt</li>
                    <li>Thi·∫øt k·∫ø theo √Ω mu·ªën</li>
                  </ul>
                  <button className="btn-primary outlined small">B·∫Øt ƒë·∫ßu ngay</button>
                </div>
              </div>
              <div className="modal-footer">
                <p className="note">L∆∞u √Ω: B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a v√† t√πy ch·ªânh kh·∫£o s√°t sau khi t·∫°o b·∫±ng c·∫£ hai ph∆∞∆°ng th·ª©c.</p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}