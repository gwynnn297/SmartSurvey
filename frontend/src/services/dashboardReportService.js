import { apiClient } from './authService';

/**
 * D·ªãch v·ª• Dashboard Report
 * ƒê·ªìng b·ªô v·ªõi c√°c API backend t·ª´ StatisticsController.java
 */
export const dashboardReportService = {

    /**
     * L·∫•y th·ªëng k√™ t·ªïng quan c·ªßa survey
     * GET /api/surveys/{surveyId}/results/overview
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<Object>} SurveyOverviewResponseDTO
     */
    getSurveyOverview: async (surveyId) => {
        try {
            const response = await apiClient.get(`/api/surveys/${surveyId}/results/overview`);
            return response.data;
        } catch (error) {
            console.error('‚ùå Get survey overview error:', error);

            // Enhanced error handling for 401
            if (error.response?.status === 401) {
                console.warn('üîê StatisticsController endpoints may require special authentication or be not implemented yet');
            }

            throw error;
        }
    },

    /**
     * L·∫•y timeline responses c·ªßa survey  
     * GET /api/surveys/{surveyId}/results/timeline
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<Object>} SurveyTimelineResponseDTO
     */
    getSurveyTimeline: async (surveyId) => {
        try {
            const response = await apiClient.get(`/api/surveys/${surveyId}/results/timeline`);
            return response.data;
        } catch (error) {
            console.error('‚ùå Get survey timeline error:', error);

            // Enhanced error handling for 401
            if (error.response?.status === 401) {
                console.warn('üîê StatisticsController endpoints may require special authentication or be not implemented yet');
            }

            throw error;
        }
    },

    /**
     * L·∫•y th·ªëng k√™ s·ªë c√¢u h·ªèi theo lo·∫°i
     * GET /api/surveys/{surveyId}/results/question-counts
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<Object>} SurveyQuestionCountsDTO
     */
    getSurveyQuestionCounts: async (surveyId) => {
        try {
            const response = await apiClient.get(`/api/surveys/${surveyId}/results/question-counts`);
            return response.data;
        } catch (error) {
            console.error('‚ùå Get survey question counts error:', error);

            // Enhanced error handling for 401
            if (error.response?.status === 401) {
                console.warn('üîê StatisticsController endpoints may require special authentication or be not implemented yet');
            }

            throw error;
        }
    },

    /**
     * Helper function: L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt cho dashboard trong m·ªôt l·∫ßn g·ªçi
     * v·ªõi fallback mechanism cho l·ªói 401
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<Object>} Combined dashboard data ho·∫∑c mock data n·∫øu API kh√¥ng kh·∫£ d·ª•ng
     */
    getDashboardData: async (surveyId) => {
        try {
            console.log('üîç Attempting to fetch dashboard data from StatisticsController APIs...');

            // G·ªçi song song 3 APIs ƒë·ªÉ t·ªëi ∆∞u performance
            const [overviewData, timelineData, questionCountsData] = await Promise.all([
                dashboardReportService.getSurveyOverview(surveyId),
                dashboardReportService.getSurveyTimeline(surveyId),
                dashboardReportService.getSurveyQuestionCounts(surveyId)
            ]);

            console.log('‚úÖ Successfully fetched real data from StatisticsController');

            return {
                overview: overviewData,
                timeline: timelineData,
                questionCounts: questionCountsData,
                success: true,
                isRealData: true
            };
        } catch (error) {
            console.error('‚ùå Get dashboard data error:', error);

            // Check if it's 401 error - StatisticsController may not be properly configured for auth
            if (error.response?.status === 401) {
                console.warn('üîê StatisticsController authentication issue detected. Using fallback mock data.');
                return dashboardReportService.getMockDashboardData(surveyId);
            }

            throw error;
        }
    },

    /**
     * Fallback mock data khi StatisticsController APIs kh√¥ng kh·∫£ d·ª•ng do l·ªói 401
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Object} Mock dashboard data
     */
    getMockDashboardData: (surveyId) => {
        console.log('üìä Using mock data for dashboard due to authentication issues');

        const now = new Date();
        const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        const twoDaysAgo = new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000);

        return {
            overview: {
                surveyId: surveyId,
                surveyTitle: `Survey ${surveyId}`,
                totalResponses: 128,
                viewership: 1000,
                completionRate: 95.5,
                avgCompletionTime: '3.2m',
                status: 'active',
                createdAt: yesterday.toISOString(),
                lastResponseAt: now.toISOString()
            },
            timeline: {
                surveyId: surveyId,
                surveyTitle: `Survey ${surveyId}`,
                daily: [
                    {
                        date: now.toISOString().split('T')[0],
                        count: 15,
                        completed: 14,
                        partial: 1
                    },
                    {
                        date: yesterday.toISOString().split('T')[0],
                        count: 12,
                        completed: 11,
                        partial: 1
                    },
                    {
                        date: twoDaysAgo.toISOString().split('T')[0],
                        count: 8,
                        completed: 7,
                        partial: 1
                    }
                ],
                hourly: []
            },
            questionCounts: {
                surveyId: surveyId,
                total: 10,
                byType: {
                    'multiple_choice': 4,
                    'single_choice': 2,
                    'open_ended': 2,
                    'boolean_': 1,
                    'rating': 1
                }
            },
            success: true,
            isRealData: false,
            fallbackReason: 'StatisticsController authentication not configured'
        };
    },

    /**
     * Track view cho survey b·∫±ng c√°ch g·ªçi public endpoint
     * GET /surveys/{id}/public - T·ª± ƒë·ªông tƒÉng view count
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<Object>} SurveyPublicResponseDTO
     */
    trackSurveyView: async (surveyId) => {
        try {
            console.log('üëÅÔ∏è Tracking view for survey:', surveyId);
            const response = await apiClient.get(`/surveys/${surveyId}/public`);
            console.log('‚úÖ Successfully tracked view for survey:', surveyId);
            return response.data;
        } catch (error) {
            console.error('‚ùå Track survey view error:', error);
            throw error;
        }
    },

    /**
     * L·∫•y th√¥ng tin public c·ªßa survey (k√®m track view)
     * S·ª≠ d·ª•ng endpoint kh√¥ng y√™u c·∫ßu authentication
     * @param {number} surveyId - ID kh·∫£o s√°t 
     * @returns {Promise<Object>} SurveyPublicResponseDTO
     */
    getSurveyPublicInfo: async (surveyId) => {
        try {
            const response = await apiClient.get(`/surveys/${surveyId}/public`);
            return response.data;
        } catch (error) {
            console.error('‚ùå Get survey public info error:', error);
            throw error;
        }
    },

    /**
     * Helper function ƒë·ªÉ tƒÉng view count khi ng∆∞·ªùi d√πng click v√†o link survey
     * @param {number} surveyId - ID kh·∫£o s√°t
     * @returns {Promise<boolean>} True n·∫øu track view th√†nh c√¥ng
     */
    incrementViewCount: async (surveyId) => {
        try {
            await dashboardReportService.trackSurveyView(surveyId);
            return true;
        } catch (error) {
            console.error('‚ùå Failed to increment view count:', error);
            return false;
        }
    },

    /**
     * Ki·ªÉm tra xem StatisticsController APIs c√≥ ho·∫°t ƒë·ªông kh√¥ng
     * @param {number} surveyId - ID kh·∫£o s√°t ƒë·ªÉ test
     * @returns {Promise<boolean>} True n·∫øu APIs ho·∫°t ƒë·ªông
     */
    testApiAvailability: async (surveyId) => {
        try {
            await dashboardReportService.getSurveyOverview(surveyId);
            return true;
        } catch (error) {
            if (error.response?.status === 401) {
                console.warn('üîê StatisticsController requires authentication setup on backend');
            } else if (error.response?.status === 404) {
                console.warn('üö´ StatisticsController endpoints not found');
            } else {
                console.warn('‚ö†Ô∏è StatisticsController APIs unavailable:', error.message);
            }
            return false;
        }
    }
};

// Export individual functions for easy importing
export const {
    getSurveyOverview,
    getSurveyTimeline,
    getSurveyQuestionCounts,
    getDashboardData,
    trackSurveyView,
    getSurveyPublicInfo,
    incrementViewCount,
    testApiAvailability
} = dashboardReportService;

export default dashboardReportService;

/**
 * üìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TRACK VIEW:
 * 
 * 1. Khi t·∫°o link chia s·∫ª survey:
 *    - Link s·∫Ω c√≥ d·∫°ng: /response/{surveyId}
 *    - Khi ng∆∞·ªùi d√πng truy c·∫≠p link n√†y, PublicResponsePage s·∫Ω t·ª± ƒë·ªông g·ªçi trackSurveyView()
 * 
 * 2. Tracking s·∫Ω di·ªÖn ra t·ª± ƒë·ªông t·∫°i:
 *    - PublicResponsePage.jsx (khi load survey form)
 *    - Ho·∫∑c b·∫•t k·ª≥ component n√†o render public survey
 * 
 * 3. View count s·∫Ω ƒë∆∞·ª£c l∆∞u ·ªü backend v√† hi·ªÉn th·ªã trong DashboardReportPage
 * 
 * 4. ƒê·ªÉ test view count:
 *    - S·ª≠ d·ª•ng button "Test View" trong DashboardReportPage
 *    - Ho·∫∑c g·ªçi tr·ª±c ti·∫øp incrementViewCount(surveyId)
 * 
 * Example usage:
 * ```javascript
 * import { incrementViewCount } from './dashboardReportService';
 * 
 * // Trong PublicResponsePage.jsx
 * useEffect(() => {
 *   if (surveyId) {
 *     incrementViewCount(surveyId);
 *   }
 * }, [surveyId]);
 * ```
 */