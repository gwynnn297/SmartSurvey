import { apiClient } from './authService';

/**
 * Service qu·∫£n l√Ω c√°c ph·∫£n h·ªìi c√° nh√¢n (Individual Responses)
 * ƒê·ªìng b·ªô ho√†n to√†n v·ªõi ResponseController.java backend
 * 
 * Backend Controller: ResponseController
 * Base URL: /api
 */

export const individualResponseService = {

    /**
     * L·∫•y danh s√°ch ph·∫£n h·ªìi v·ªõi ph√¢n trang, l·ªçc v√† t√¨m ki·∫øm
     * GET /api/surveys/{surveyId}/responses
     * 
     * Backend Implementation:
     * - @GetMapping("/api/surveys/{surveyId}/responses")
     * - ResponsePageDTO<ResponseSummaryDTO> listResponses(@PathVariable Long surveyId, ResponseFilterRequestDTO filter)
     * 
     * @param {number} surveyId - ID c·ªßa kh·∫£o s√°t
     * @param {Object} filter - ƒê·ªëi t∆∞·ª£ng filter v·ªõi c√°c thu·ªôc t√≠nh:
     *   - page: S·ªë trang (m·∫∑c ƒë·ªãnh: 0)
     *   - size: K√≠ch th∆∞·ªõc trang (m·∫∑c ƒë·ªãnh: 10)
     *   - sort: S·∫Øp x·∫øp theo field v√† h∆∞·ªõng (m·∫∑c ƒë·ªãnh: "submittedAt,desc")
     *   - userId: L·ªçc theo ID ng∆∞·ªùi d√πng (optional)
     *   - requestToken: L·ªçc theo request token (optional)
     *   - completionStatus: Tr·∫°ng th√°i ho√†n th√†nh - "completed" | "partial" | "dropped" (optional)
     *   - search: T√¨m ki·∫øm trong answers (optional)
     *   - from: L·ªçc t·ª´ th·ªùi gian (ISO DateTime string, optional)
     *   - to: L·ªçc ƒë·∫øn th·ªùi gian (ISO DateTime string, optional)
     * @returns {Promise<ResponsePageDTO<ResponseSummaryDTO>>} K·∫øt qu·∫£ ph√¢n trang v·ªõi danh s√°ch ResponseSummaryDTO
     */
    listResponses: async (surveyId, filter = {}) => {
        try {
            console.log('üìã L·∫•y danh s√°ch ph·∫£n h·ªìi cho survey:', surveyId, 'v·ªõi filter:', filter);

            // Chuy·ªÉn ƒë·ªïi filter object th√†nh query params
            const params = {
                page: filter.page !== undefined ? filter.page : 0,
                size: filter.size !== undefined ? filter.size : 10,
                ...(filter.sort && { sort: filter.sort }),
                ...(filter.userId && { userId: filter.userId }),
                ...(filter.requestToken && { requestToken: filter.requestToken }),
                ...(filter.completionStatus && { completionStatus: filter.completionStatus }),
                ...(filter.search && { search: filter.search }),
                ...(filter.from && { from: filter.from }),
                ...(filter.to && { to: filter.to })
            };

            const response = await apiClient.get(`/api/surveys/${surveyId}/responses`, { params });
            console.log('‚úÖ L·∫•y danh s√°ch ph·∫£n h·ªìi th√†nh c√¥ng:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y danh s√°ch ph·∫£n h·ªìi:', error);
            throw error;
        }
    },

    /**
     * L·∫•y chi ti·∫øt m·ªôt ph·∫£n h·ªìi v·ªõi t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi
     * GET /api/responses/{responseId}
     * 
     * Backend Implementation:
     * - @GetMapping("/api/responses/{responseId}")
     * - ResponseWithAnswersDTO getResponseDetail(@PathVariable Long responseId)
     * 
     * @param {number} responseId - ID c·ªßa ph·∫£n h·ªìi
     * @returns {Promise<ResponseWithAnswersDTO>} Chi ti·∫øt ph·∫£n h·ªìi bao g·ªìm t·∫•t c·∫£ answers
     */
    getResponseDetail: async (responseId) => {
        try {
            console.log('üîç L·∫•y chi ti·∫øt ph·∫£n h·ªìi:', responseId);
            const response = await apiClient.get(`/api/responses/${responseId}`);
            console.log('‚úÖ L·∫•y chi ti·∫øt ph·∫£n h·ªìi th√†nh c√¥ng:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt ph·∫£n h·ªìi:', error);
            throw error;
        }
    },

    /**
     * Xu·∫•t danh s√°ch ph·∫£n h·ªìi ra file CSV ho·∫∑c Excel
     * POST /api/surveys/{surveyId}/responses/export
     * 
     * Backend Implementation:
     * - @PostMapping("/api/surveys/{surveyId}/responses/export")
     * - ResponseEntity<byte[]> exportResponses(
     *     @PathVariable Long surveyId,
     *     @RequestParam(name = "format", defaultValue = "csv") String format,
     *     @RequestParam(name = "includeAnswers", defaultValue = "true") boolean includeAnswers,
     *     ResponseFilterRequestDTO filter)
     * 
     * @param {number} surveyId - ID c·ªßa kh·∫£o s√°t
     * @param {Object} options - T√πy ch·ªçn export:
     *   - format: ƒê·ªãnh d·∫°ng file - "csv" ho·∫∑c "excel" (m·∫∑c ƒë·ªãnh: "csv")
     *   - includeAnswers: C√≥ bao g·ªìm c√¢u tr·∫£ l·ªùi chi ti·∫øt kh√¥ng (m·∫∑c ƒë·ªãnh: true)
     *   - filter: ƒê·ªëi t∆∞·ª£ng filter t∆∞∆°ng t·ª± listResponses (optional)
     * @returns {Promise<Blob>} File blob ƒë·ªÉ download
     */
    exportResponses: async (surveyId, options = {}) => {
        try {
            console.log('üì• Xu·∫•t danh s√°ch ph·∫£n h·ªìi cho survey:', surveyId, 'v·ªõi options:', options);

            const format = options.format || 'csv';
            const includeAnswers = options.includeAnswers !== undefined ? options.includeAnswers : true;

            // Chu·∫©n b·ªã params t·ª´ filter object
            const params = {
                format,
                includeAnswers
            };

            // Th√™m c√°c filter params n·∫øu c√≥
            if (options.filter) {
                const filter = options.filter;
                if (filter.page !== undefined) params.page = filter.page;
                if (filter.size !== undefined) params.size = filter.size;
                if (filter.sort) params.sort = filter.sort;
                if (filter.userId) params.userId = filter.userId;
                if (filter.requestToken) params.requestToken = filter.requestToken;
                if (filter.completionStatus) params.completionStatus = filter.completionStatus;
                if (filter.search) params.search = filter.search;
                if (filter.from) params.from = filter.from;
                if (filter.to) params.to = filter.to;
            }

            // G·ªçi API v·ªõi responseType l√† blob ƒë·ªÉ nh·∫≠n file
            const response = await apiClient.post(
                `/api/surveys/${surveyId}/responses/export`,
                {},
                {
                    params,
                    responseType: 'blob'
                }
            );

            console.log('‚úÖ Xu·∫•t file th√†nh c√¥ng:', format);

            // T·∫°o blob URL v√† trigger download
            const blob = new Blob([response.data]);
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;

            // ƒê·∫∑t t√™n file v·ªõi format v√† timestamp
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
            const extension = format === 'excel' ? 'xlsx' : 'csv';
            link.download = `survey-${surveyId}-responses-${timestamp}.${extension}`;

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);

            return blob;
        } catch (error) {
            console.error('‚ùå L·ªói khi xu·∫•t danh s√°ch ph·∫£n h·ªìi:', error);
            throw error;
        }
    },

    /**
     * X√≥a h√†ng lo·∫°t c√°c ph·∫£n h·ªìi
     * DELETE /api/surveys/{surveyId}/responses
     * 
     * Backend Implementation:
     * - @DeleteMapping("/api/surveys/{surveyId}/responses")
     * - ResponseEntity<Map<String, Object>> bulkDelete(
     *     @PathVariable Long surveyId,
     *     @RequestBody List<Long> responseIds)
     * 
     * @param {number} surveyId - ID c·ªßa kh·∫£o s√°t
     * @param {Array<number>} responseIds - M·∫£ng ID c√°c ph·∫£n h·ªìi c·∫ßn x√≥a
     * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a v·ªõi format: { deleted: number, requested: number }
     */
    bulkDeleteResponses: async (surveyId, responseIds) => {
        try {
            console.log('üóëÔ∏è X√≥a h√†ng lo·∫°t ph·∫£n h·ªìi cho survey:', surveyId, 'IDs:', responseIds);

            if (!Array.isArray(responseIds) || responseIds.length === 0) {
                throw new Error('responseIds ph·∫£i l√† m·ªôt m·∫£ng kh√¥ng r·ªóng');
            }

            const response = await apiClient.delete(`/api/surveys/${surveyId}/responses`, {
                data: responseIds
            });

            console.log('‚úÖ X√≥a h√†ng lo·∫°t ph·∫£n h·ªìi th√†nh c√¥ng:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi x√≥a h√†ng lo·∫°t ph·∫£n h·ªìi:', error);
            throw error;
        }
    },

    /**
     * Submit ph·∫£n h·ªìi kh·∫£o s√°t (kh√¥ng c√≥ file)
     * POST /responses
     * 
     * Backend Implementation:
     * - @PostMapping("/responses")
     * - ResponseWithAnswersDTO submitResponse(@Valid @RequestBody ResponseSubmitRequestDTO request)
     * 
     * Note: API n√†y c√≥ th·ªÉ ƒë√£ c√≥ trong responseService.js, nh∆∞ng ƒë∆∞·ª£c th√™m v√†o ƒë√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·∫ßy ƒë·ªß
     * 
     * @param {Object} request - Request payload:
     *   - surveyId: ID c·ªßa kh·∫£o s√°t
     *   - requestToken: Token y√™u c·∫ßu (optional)
     *   - answers: M·∫£ng c√°c c√¢u tr·∫£ l·ªùi
     * @returns {Promise<ResponseWithAnswersDTO>} Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c submit
     */
    submitResponse: async (request) => {
        try {
            console.log('üìù Submit ph·∫£n h·ªìi kh·∫£o s√°t:', request);
            const response = await apiClient.post('/responses', request);
            console.log('‚úÖ Submit ph·∫£n h·ªìi th√†nh c√¥ng:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi submit ph·∫£n h·ªìi:', error);
            throw error;
        }
    },

    /**
     * Submit ph·∫£n h·ªìi kh·∫£o s√°t v·ªõi file ƒë√≠nh k√®m (multipart/form-data)
     * POST /responses/with-files
     * 
     * Backend Implementation:
     * - @PostMapping("/responses/with-files")
     * - ResponseWithAnswersDTO submitResponseWithFiles(
     *     @RequestParam("surveyId") Long surveyId,
     *     @RequestParam("answers") String answersJson,
     *     @RequestParam Map<String, MultipartFile> files)
     * 
     * @param {number} surveyId - ID c·ªßa kh·∫£o s√°t
     * @param {Array|Object} answers - M·∫£ng ho·∫∑c object c√°c c√¢u tr·∫£ l·ªùi (s·∫Ω ƒë∆∞·ª£c stringify th√†nh JSON)
     * @param {Object} files - Object ch·ª©a c√°c file ƒë√≠nh k√®m, key l√† t√™n field
     * @returns {Promise<ResponseWithAnswersDTO>} Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c submit v·ªõi file
     */
    submitResponseWithFiles: async (surveyId, answers, files = {}) => {
        try {
            console.log('üìé Submit ph·∫£n h·ªìi kh·∫£o s√°t v·ªõi file:', surveyId, 'files:', Object.keys(files));

            // T·∫°o FormData cho multipart/form-data
            const formData = new FormData();
            formData.append('surveyId', surveyId.toString());
            formData.append('answers', JSON.stringify(answers));

            // Th√™m c√°c file v√†o FormData
            Object.keys(files).forEach((key) => {
                const file = files[key];
                if (file instanceof File) {
                    formData.append(key, file);
                } else if (file instanceof Blob) {
                    formData.append(key, file);
                } else {
                    console.warn('‚ö†Ô∏è File kh√¥ng h·ª£p l·ªá cho key:', key, file);
                }
            });

            const response = await apiClient.post('/responses/with-files', formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            console.log('‚úÖ Submit ph·∫£n h·ªìi v·ªõi file th√†nh c√¥ng:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi submit ph·∫£n h·ªìi v·ªõi file:', error);
            throw error;
        }
    }
};

// Export individual functions for easy importing
export const {
    listResponses,
    getResponseDetail,
    exportResponses,
    bulkDeleteResponses,
    submitResponse,
    submitResponseWithFiles
} = individualResponseService;

export default individualResponseService;

