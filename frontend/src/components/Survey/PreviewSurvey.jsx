import React from 'react';
import './PreviewSurvey.css';

const PreviewSurvey = ({ surveyData, questions, onClose }) => {
    const renderQuestion = (question, index) => {
        return (
            <div key={question.id || index} className="preview-question">
                <div className="preview-question-header">
                    <span className="question-number">{index + 1}</span>
                    <span className="question-type-badge">
                        {question.question_type === 'multiple_choice' && 'üîò Tr·∫Øc nghi·ªám'}
                        {question.question_type === 'open_ended' && 'üìù T·ª± lu·∫≠n'}
                        {question.question_type === 'rating' && '‚≠ê ƒê√°nh gi√°'}
                        {question.question_type === 'boolean' && '‚úÖ C√≥/Kh√¥ng'}
                    </span>
                </div>

                <h3 className="preview-question-text">
                    {question.question_text || 'C√¢u h·ªèi ch∆∞a c√≥ n·ªôi dung'}
                </h3>

                {question.is_required && (
                    <span className="required-badge">* B·∫Øt bu·ªôc</span>
                )}

                <div className="preview-question-input">
                    {renderQuestionInput(question)}
                </div>
            </div>
        );
    };

    const renderQuestionInput = (question) => {
        switch (question.question_type) {
            case 'multiple_choice':
                return (
                    <div className="preview-options">
                        {question.options?.map((option, index) => (
                            <label key={index} className="preview-option">
                                <input type="radio" name={`question_${question.id}`} disabled />
                                <span className="option-text">
                                    {option.option_text || `L·ª±a ch·ªçn ${index + 1}`}
                                </span>
                            </label>
                        )) || (
                                <div className="preview-placeholder">
                                    Ch∆∞a c√≥ l·ª±a ch·ªçn n√†o
                                </div>
                            )}
                    </div>
                );

            case 'open_ended':
                return (
                    <textarea
                        placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n..."
                        disabled
                        rows={4}
                        className="preview-textarea"
                    />
                );

            case 'rating':
                return (
                    <div className="preview-rating">
                        <div className="rating-scale">
                            {[1, 2, 3, 4, 5].map((star) => (
                                <label key={star} className="rating-option">
                                    <input type="radio" name={`rating_${question.id}`} disabled />
                                    <span className="star">‚≠ê</span>
                                    <span className="rating-number">{star}</span>
                                </label>
                            ))}
                        </div>
                        <div className="rating-labels">
                            <span>R·∫•t kh√¥ng h√†i l√≤ng</span>
                            <span>R·∫•t h√†i l√≤ng</span>
                        </div>
                    </div>
                );

            case 'boolean':
                return (
                    <div className="preview-boolean">
                        <label className="boolean-option">
                            <input type="radio" name={`boolean_${question.id}`} disabled />
                            <span>‚úÖ C√≥</span>
                        </label>
                        <label className="boolean-option">
                            <input type="radio" name={`boolean_${question.id}`} disabled />
                            <span>‚ùå Kh√¥ng</span>
                        </label>
                    </div>
                );

            default:
                return <div className="preview-placeholder">Lo·∫°i c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£</div>;
        }
    };

    return (
        <div className="preview-modal-overlay" onClick={onClose}>
            <div className="preview-modal" onClick={(e) => e.stopPropagation()}>
                <div className="preview-header">
                    <div className="preview-title-section">
                        <h2 className="preview-survey-title">
                            {surveyData.title || 'Kh·∫£o s√°t ch∆∞a c√≥ ti√™u ƒë·ªÅ'}
                        </h2>
                        {surveyData.description && (
                            <p className="preview-survey-description">
                                {surveyData.description}
                            </p>
                        )}
                        <div className="preview-meta">
                            <span>üìä {questions.length} c√¢u h·ªèi</span>
                            <span>‚Ä¢</span>
                            <span>‚è±Ô∏è D·ª± ki·∫øn ho√†n th√†nh: {Math.ceil(questions.length * 0.5)} ph√∫t</span>
                        </div>
                    </div>
                    <button className="preview-close-btn" onClick={onClose}>
                        ‚úï
                    </button>
                </div>

                <div className="preview-content">
                    {questions.length === 0 ? (
                        <div className="preview-empty">
                            <div className="empty-icon">üìù</div>
                            <h3>Ch∆∞a c√≥ c√¢u h·ªèi n√†o</h3>
                            <p>Th√™m c√¢u h·ªèi ƒë·ªÉ xem tr∆∞·ªõc kh·∫£o s√°t</p>
                        </div>
                    ) : (
                        <div className="preview-questions">
                            {questions.map((question, index) => renderQuestion(question, index))}
                        </div>
                    )}
                </div>

                <div className="preview-footer">
                    <div className="preview-actions">
                        <button className="btn-secondary" onClick={onClose}>
                            ƒê√≥ng
                        </button>
                        <button className="btn-primary" disabled>
                            G·ª≠i kh·∫£o s√°t (Ch·∫ø ƒë·ªô xem tr∆∞·ªõc)
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PreviewSurvey;
